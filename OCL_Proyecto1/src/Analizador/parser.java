
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Collection;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\004\000" +
    "\002\004\002\000\002\031\002\000\002\005\016\000\002" +
    "\006\015\000\002\012\003\000\002\012\003\000\002\007" +
    "\004\000\002\010\006\000\002\011\005\000\002\011\002" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\010\000\002\014\010\000\002\014" +
    "\010\000\002\014\010\000\002\014\010\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\015\006\000\002\016\003\000\002" +
    "\016\003\000\002\017\010\000\002\020\006\000\002\020" +
    "\010\000\002\021\003\000\002\021\003\000\002\030\005" +
    "\000\002\030\002\000\002\022\015\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\012\000\002\027\003\000\002\027\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\004\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\004\020\004\001\002\000\046\021\026\025" +
    "\034\026\035\027\031\030\024\031\015\032\030\033\007" +
    "\034\012\035\014\036\025\037\023\040\022\041\032\044" +
    "\027\045\020\046\037\047\033\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\013\246\001" +
    "\002\000\050\021\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\044\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\001\002\000\050\021\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\001\002\000\004\013\243\001\002" +
    "\000\050\021\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\001\002\000\004\013\240\001\002\000\004\013\233" +
    "\001\002\000\050\021\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\001\002\000\050\021\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\044\uffff" +
    "\045\uffff\046\uffff\047\uffff\001\002\000\006\013\uffd1\024" +
    "\uffd1\001\002\000\050\021\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\001\002\000\004\013\224\001\002\000" +
    "\004\013\221\001\002\000\004\013\214\001\002\000\004" +
    "\013\207\001\002\000\004\004\174\001\002\000\006\013" +
    "\uffd2\024\uffd2\001\002\000\004\013\167\001\002\000\004" +
    "\013\162\001\002\000\004\004\136\001\002\000\006\013" +
    "\uffcf\024\uffcf\001\002\000\004\004\124\001\002\000\004" +
    "\013\117\001\002\000\050\021\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\001\002\000\006\013\uffd0\024\uffd0" +
    "\001\002\000\004\013\041\001\002\000\020\050\046\051" +
    "\047\052\045\053\051\054\050\056\043\057\044\001\002" +
    "\000\022\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\001\002\000\004\004\uffcb\001\002" +
    "\000\004\004\uffc9\001\002\000\004\004\uffc7\001\002\000" +
    "\004\004\uffca\001\002\000\004\004\uffc8\001\002\000\004" +
    "\004\uffc5\001\002\000\004\004\uffc6\001\002\000\004\004" +
    "\053\001\002\000\004\004\054\001\002\000\006\022\056" +
    "\023\055\001\002\000\006\004\ufff4\016\ufff4\001\002\000" +
    "\006\004\ufff3\016\ufff3\001\002\000\004\016\060\001\002" +
    "\000\044\010\063\012\066\026\035\027\031\030\024\031" +
    "\015\032\030\033\007\034\012\035\014\036\025\037\023" +
    "\040\022\060\067\061\062\062\072\063\073\001\002\000" +
    "\014\011\uffea\014\uffea\015\uffea\017\uffea\024\uffea\001\002" +
    "\000\014\011\uffed\014\uffed\015\uffed\017\uffed\024\uffed\001" +
    "\002\000\042\012\066\026\035\027\031\030\024\031\015" +
    "\032\030\033\007\034\012\035\014\036\025\037\023\040" +
    "\022\060\067\061\062\062\072\063\073\001\002\000\014" +
    "\011\uffe8\014\uffe8\015\uffe8\017\uffe8\024\uffe8\001\002\000" +
    "\004\024\uffcc\001\002\000\004\063\077\001\002\000\014" +
    "\011\uffee\014\uffee\015\uffee\017\uffee\024\uffee\001\002\000" +
    "\014\011\uffe9\014\uffe9\015\uffe9\017\uffe9\024\uffe9\001\002" +
    "\000\004\024\075\001\002\000\014\011\uffec\014\uffec\015" +
    "\uffec\017\uffec\024\uffec\001\002\000\014\011\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\024\uffeb\001\002\000\004\024\uffcd\001" +
    "\002\000\004\007\076\001\002\000\022\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\001" +
    "\002\000\016\005\ufff2\011\ufff2\014\ufff2\015\ufff2\017\ufff2" +
    "\024\ufff2\001\002\000\006\011\uffef\015\102\001\002\000" +
    "\004\011\105\001\002\000\042\012\066\026\035\027\031" +
    "\030\024\031\015\032\030\033\007\034\012\035\014\036" +
    "\025\037\023\040\022\060\067\061\062\062\072\063\073" +
    "\001\002\000\006\011\uffef\015\102\001\002\000\004\011" +
    "\ufff0\001\002\000\006\014\ufff1\024\ufff1\001\002\000\022" +
    "\050\046\051\047\052\045\053\051\054\050\055\110\056" +
    "\043\057\044\001\002\000\022\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\001\002\000" +
    "\012\044\027\045\020\046\037\047\033\001\002\000\004" +
    "\024\112\001\002\000\004\007\113\001\002\000\004\014" +
    "\114\001\002\000\004\024\115\001\002\000\004\007\116" +
    "\001\002\000\050\021\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\001\002\000\042\012\066\026\035\027\031" +
    "\030\024\031\015\032\030\033\007\034\012\035\014\036" +
    "\025\037\023\040\022\060\067\061\062\062\072\063\073" +
    "\001\002\000\004\015\121\001\002\000\042\012\066\026" +
    "\035\027\031\030\024\031\015\032\030\033\007\034\012" +
    "\035\014\036\025\037\023\040\022\060\067\061\062\062" +
    "\072\063\073\001\002\000\004\014\123\001\002\000\060" +
    "\011\uffe7\014\uffe7\015\uffe7\017\uffe7\021\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\047\uffe7\001\002\000\006\022\056" +
    "\023\055\001\002\000\004\004\126\001\002\000\004\004" +
    "\127\001\002\000\004\012\066\001\002\000\004\005\131" +
    "\001\002\000\004\017\132\001\002\000\004\010\063\001" +
    "\002\000\004\024\134\001\002\000\004\007\135\001\002" +
    "\000\050\021\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\044\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\001\002\000\004\004\137\001\002\000\006\042\140" +
    "\043\142\001\002\000\004\016\154\001\002\000\004\024" +
    "\152\001\002\000\004\016\143\001\002\000\042\012\066" +
    "\026\035\027\031\030\024\031\015\032\030\033\007\034" +
    "\012\035\014\036\025\037\023\040\022\060\067\061\062" +
    "\062\072\063\073\001\002\000\004\017\145\001\002\000" +
    "\004\006\146\001\002\000\006\010\063\012\066\001\002" +
    "\000\004\024\uffd7\001\002\000\004\024\uffd6\001\002\000" +
    "\004\024\uffd8\001\002\000\004\007\153\001\002\000\050" +
    "\021\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\044\uffda\045\uffda\046\uffda\047\uffda\001" +
    "\002\000\042\012\066\026\035\027\031\030\024\031\015" +
    "\032\030\033\007\034\012\035\014\036\025\037\023\040" +
    "\022\060\067\061\062\062\072\063\073\001\002\000\006" +
    "\015\156\024\uffd4\001\002\000\042\012\066\026\035\027" +
    "\031\030\024\031\015\032\030\033\007\034\012\035\014" +
    "\036\025\037\023\040\022\060\067\061\062\062\072\063" +
    "\073\001\002\000\004\024\uffd9\001\002\000\006\015\156" +
    "\024\uffd4\001\002\000\004\024\uffd5\001\002\000\042\012" +
    "\066\026\035\027\031\030\024\031\015\032\030\033\007" +
    "\034\012\035\014\036\025\037\023\040\022\060\067\061" +
    "\062\062\072\063\073\001\002\000\004\015\164\001\002" +
    "\000\042\012\066\026\035\027\031\030\024\031\015\032" +
    "\030\033\007\034\012\035\014\036\025\037\023\040\022" +
    "\060\067\061\062\062\072\063\073\001\002\000\004\014" +
    "\166\001\002\000\060\011\uffe6\014\uffe6\015\uffe6\017\uffe6" +
    "\021\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\001" +
    "\002\000\042\012\066\026\035\027\031\030\024\031\015" +
    "\032\030\033\007\034\012\035\014\036\025\037\023\040" +
    "\022\060\067\061\062\062\072\063\073\001\002\000\004" +
    "\015\171\001\002\000\042\012\066\026\035\027\031\030" +
    "\024\031\015\032\030\033\007\034\012\035\014\036\025" +
    "\037\023\040\022\060\067\061\062\062\072\063\073\001" +
    "\002\000\004\014\173\001\002\000\060\011\uffe3\014\uffe3" +
    "\015\uffe3\017\uffe3\021\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3\046" +
    "\uffe3\047\uffe3\001\002\000\006\022\056\023\055\001\002" +
    "\000\004\004\176\001\002\000\004\004\177\001\002\000" +
    "\004\063\200\001\002\000\004\005\201\001\002\000\004" +
    "\017\202\001\002\000\042\012\066\026\035\027\031\030" +
    "\024\031\015\032\030\033\007\034\012\035\014\036\025" +
    "\037\023\040\022\060\067\061\062\062\072\063\073\001" +
    "\002\000\004\024\ufff7\001\002\000\004\024\205\001\002" +
    "\000\004\007\206\001\002\000\050\021\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\001\002\000\006\010\063" +
    "\012\066\001\002\000\004\014\uffdc\001\002\000\004\014" +
    "\uffdb\001\002\000\004\014\213\001\002\000\060\011\uffdf" +
    "\014\uffdf\015\uffdf\017\uffdf\021\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\001\002\000\042\012\066\026\035" +
    "\027\031\030\024\031\015\032\030\033\007\034\012\035" +
    "\014\036\025\037\023\040\022\060\067\061\062\062\072" +
    "\063\073\001\002\000\004\015\216\001\002\000\042\012" +
    "\066\026\035\027\031\030\024\031\015\032\030\033\007" +
    "\034\012\035\014\036\025\037\023\040\022\060\067\061" +
    "\062\062\072\063\073\001\002\000\004\014\220\001\002" +
    "\000\060\011\uffe5\014\uffe5\015\uffe5\017\uffe5\021\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\001\002\000\006" +
    "\010\063\012\066\001\002\000\004\014\223\001\002\000" +
    "\060\011\uffde\014\uffde\015\uffde\017\uffde\021\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\001\002\000\006\010" +
    "\063\012\066\001\002\000\004\014\226\001\002\000\060" +
    "\011\uffdd\014\uffdd\015\uffdd\017\uffdd\021\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\001\002\000\050\021\026" +
    "\024\231\025\034\026\035\027\031\030\024\031\015\032" +
    "\030\033\007\034\012\035\014\036\025\037\023\040\022" +
    "\041\032\044\027\045\020\046\037\047\033\001\002\000" +
    "\050\021\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\001\002\000\004\020\232\001\002\000\004\002\000\001" +
    "\002\000\042\012\066\026\035\027\031\030\024\031\015" +
    "\032\030\033\007\034\012\035\014\036\025\037\023\040" +
    "\022\060\067\061\062\062\072\063\073\001\002\000\004" +
    "\015\235\001\002\000\042\012\066\026\035\027\031\030" +
    "\024\031\015\032\030\033\007\034\012\035\014\036\025" +
    "\037\023\040\022\060\067\061\062\062\072\063\073\001" +
    "\002\000\004\014\237\001\002\000\060\011\uffe4\014\uffe4" +
    "\015\uffe4\017\uffe4\021\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\001\002\000\006\010\063\012\066\001\002" +
    "\000\004\014\242\001\002\000\060\011\uffe0\014\uffe0\015" +
    "\uffe0\017\uffe0\021\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\001\002\000\006\010\063\012\066\001\002\000" +
    "\004\014\245\001\002\000\060\011\uffe1\014\uffe1\015\uffe1" +
    "\017\uffe1\021\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\001\002\000\006\010\063\012\066\001\002\000\004" +
    "\014\250\001\002\000\060\011\uffe2\014\uffe2\015\uffe2\017" +
    "\uffe2\021\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\004\002\004\001\001\000\022\003\015\005" +
    "\016\006\007\014\010\015\020\017\035\022\012\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\041\025\051\001\001\000\004\026\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\067\010\064\013\073\014\060\015" +
    "\063\027\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\067\013\077\014\060\015\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\100\001" +
    "\001\000\002\001\001\000\012\007\067\013\102\014\060" +
    "\015\063\001\001\000\004\011\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\106\025\051\001\001" +
    "\000\002\001\001\000\004\023\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\067\013" +
    "\117\014\060\015\063\001\001\000\002\001\001\000\012" +
    "\007\067\013\121\014\060\015\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\067\013" +
    "\143\014\060\015\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\146\010\147\021\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\067\013\154\014" +
    "\060\015\063\001\001\000\004\030\156\001\001\000\012" +
    "\007\067\013\157\014\060\015\063\001\001\000\002\001" +
    "\001\000\004\030\160\001\001\000\002\001\001\000\012" +
    "\007\067\013\162\014\060\015\063\001\001\000\002\001" +
    "\001\000\012\007\067\013\164\014\060\015\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\067\013" +
    "\167\014\060\015\063\001\001\000\002\001\001\000\012" +
    "\007\067\013\171\014\060\015\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\067\013\202\014\060" +
    "\015\063\001\001\000\004\031\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\207" +
    "\010\210\016\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\067" +
    "\013\214\014\060\015\063\001\001\000\002\001\001\000" +
    "\012\007\067\013\216\014\060\015\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\207\010\210\016" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\207\010\210\016\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\227\005\016\006\007\014\010" +
    "\015\020\017\035\022\012\023\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\067" +
    "\013\233\014\060\015\063\001\001\000\002\001\001\000" +
    "\012\007\067\013\235\014\060\015\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\207\010\210\016" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\207\010\210\016\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\207\010\210\016\246\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    HashMap<Object,Object> data = new HashMap<>(); 
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico irrecuperable: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    
    String codigoUsr="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TK_PROGRAM CODIGO OTROCODIGO TK_END TK_PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= ARREGLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= ESTADISTICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= GRAFICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OTROCODIGO ::= OTROCODIGO CODIGO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTROCODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OTROCODIGO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTROCODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLE ::= TK_VAR DOSP TIPO DOSP DOSP NOMBRES MENORQ MENOS EXPRESION NT$0 TK_END PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

    data.put(n.toString(), e);
    for (Object clave : data.keySet()) {
        System.out.println("Clave: " + clave.toString() + " |    Valor: " + data.get(clave).toString());
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARREGLO ::= TK_ARR DOSP TIPO DOSP DOSP IDARREGLO MENORQ MENOS LISTA_VALORES TK_END PYCOMA 
            {
              Object RESULT =null;
		int Atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int Atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object At = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int Aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Airight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object Ai = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    data.put(Ai, Av);
    ArrayList<Object> miLista = (ArrayList<Object>) data.get(Ai);
    for(Object valor: miLista){
        System.out.println("Valores para: "+Ai+" son:"+valor);
    }
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= TK_CHAR 
            {
              Object RESULT =null;
		 RESULT = "char[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= TK_CADENA 
            {
              Object RESULT =null;
		 RESULT = "String"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IDARREGLO ::= ARRB NOMBRES 
            {
              Object RESULT =null;
		int nombreAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombreA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = nombreA;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDARREGLO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_VALORES ::= CORA EXPRESION OTRA_EXPRESION CORC 
            {
              Object RESULT =null;
		int Leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Loeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Loeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object Loe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Object> lista = new ArrayList<>();
    lista.add(Le);//este añade el primer valor que se obtiene
    lista.addAll((Collection<? extends Object>) Loe); //esto indica que Loe puede ser cualquier cosa que sea de tipo Object
    
    RESULT = lista;
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OTRA_EXPRESION ::= COMA EXPRESION OTRA_EXPRESION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otraexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otraexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object otraexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Object> lista;
    if (otraexp == null) {
        lista = new ArrayList<>();
    } else {
        lista = (ArrayList<Object>) otraexp;
    }
    lista.add(0,exp);
    RESULT = lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_EXPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OTRA_EXPRESION ::= 
            {
              Object RESULT =null;
		
    RESULT = new ArrayList<>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_EXPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= ENTEROS 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= DECIMAL 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= STRINGT 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= NOMBRES 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            RESULT=data.get(E); 
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= OPERACION 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= IDARREGLO 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //Para cuando sean arreglos guarlos y retornar el arreglo
                           RESULT=data.get(E); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= ESTADISTICA 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION ::= TK_SUM PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int ns1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ns1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ns1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ns2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ns2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ns2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    double n1 = Double.parseDouble(ns1.toString());
                    double n2 = Double.parseDouble(ns2.toString());
                    RESULT = n1 + n2;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION ::= TK_RES PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nr1.toString());
                        double n2 = Double.parseDouble(nr2.toString());
                        RESULT = n1 - n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= TK_MUL PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nm1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nm2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nm1.toString());
                        double n2 = Double.parseDouble(nm2.toString());
                        RESULT = n1 * n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION ::= TK_DIV PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nd1.toString());
                        double n2 = Double.parseDouble(nd2.toString());
                        RESULT = n1 / n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION ::= TK_MOD PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int mn1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mn1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mn1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mn2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mn2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mn2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(mn1.toString());
                        double n2 = Double.parseDouble(mn2.toString());
                        RESULT = n1 % n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ESTADISTICA ::= TK_MEDIA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    double sum = 0;
                    int count = 0;
                    for (Object valor : datosC) {
                            sum += Double.parseDouble(valor.toString());
                            count++;
                        
                    }
                    double media = sum / count ;
                    RESULT = media;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ESTADISTICA ::= TK_MEDIANA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    double mediana = 0;
                    int size = datosC.size();
                    if (size % 2 == 0) {
                        mediana = (Double.parseDouble(datosC.get(size / 2 - 1).toString()) + Double.parseDouble(datosC.get(size / 2).toString())) / 2;
                    } else {
                        mediana = Double.parseDouble(datosC.get(size / 2).toString());
                    }
                    RESULT = mediana;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTADISTICA ::= TK_MODA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    int maximoVeces = 0;
                    double moda = 0;
                    for (int i = 0; i < datosC.size(); i++) {
                        int veces = 0;
                        for (int j = 0; j < datosC.size(); j++) {
                            if (datosC.get(i).equals(datosC.get(j))) {
                                veces++;
                            }
                        }
                        if (veces > maximoVeces) {
                            moda = Double.parseDouble(datosC.get(i).toString());
                            maximoVeces = veces;
                        }
                    }
                    RESULT = moda;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESTADISTICA ::= TK_VARIANZA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    //para la varianza se necesita calcular la media aritmetica
                    double sum = 0;
                    for (Object valor : datosC) {
                            sum += Double.parseDouble(valor.toString());                      
                    }
                    double media = sum / datosC.size() ;
                    // por cada dato RESTAR este valor y elevar al cuadrado
                    double SUMparentesisCuadrados = 0;
                    for(Object valor: datosC){
                        double par = Double.parseDouble(valor.toString()) - media;
                        SUMparentesisCuadrados += par * par;
                    }
                    double varianza = SUMparentesisCuadrados /datosC.size();
                    RESULT = varianza;
                    

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTADISTICA ::= TK_MAX PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    Double maxV = Double.parseDouble(datosC.get(0).toString());
                    for(Object obj:datosC){
                    double num = Double.parseDouble(obj.toString());
                    if(num > maxV){
                        maxV = num;
                    }
                    }
                    RESULT = maxV;
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESTADISTICA ::= TK_MIN PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    Double minV =  Double.parseDouble(datosC.get(0).toString());
                    for(Object obj:datosC){
                    double num = Double.parseDouble(obj.toString());
                    if(num < minV){
                        minV = num;
                    }
                    }
                    RESULT = minV;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DATOS ::= IDARREGLO 
            {
              Object RESULT =null;
		int arrIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Object> datos = (ArrayList<Object>) data.get(arrID);
        RESULT = datos;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DATOS ::= LISTA_VALORES 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IMPRESION ::= TK_CONSOLE DOSP DOSP TIPOIMPRESION TK_END PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOIMPRESION ::= TK_PRINT IGUAL EXPRESION OTRAEXPRESIONIMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIMPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOIMPRESION ::= TK_COLUMN IGUAL EXPRESION MENOS MAYORQ ARREGLOIMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIMPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARREGLOIMP ::= IDARREGLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOIMP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARREGLOIMP ::= LISTA_VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOIMP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OTRAEXPRESIONIMP ::= COMA EXPRESION OTRAEXPRESIONIMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAEXPRESIONIMP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OTRAEXPRESIONIMP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAEXPRESIONIMP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GRAFICA ::= TIPOGRAPH PARA INSTRUCCION OTRAINSTRUCCION TK_EXEC TIPOGRAPH TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOGRAPH ::= TK_GRAPHBAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOGRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOGRAPH ::= TK_GRAPHPIE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOGRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOGRAPH ::= TK_GRAPHLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOGRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOGRAPH ::= TK_HISTOGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOGRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCION ::= TIPOINSTRUCCION DOSP DOSP TIPO IGUAL EXPRESIONGRAPH TK_END PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESIONGRAPH ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONGRAPH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESIONGRAPH ::= LISTA_VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONGRAPH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOINSTRUCCION ::= TK_VALUES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOINSTRUCCION ::= TK_TITULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOINSTRUCCION ::= TK_LABEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOINSTRUCCION ::= TK_EJEX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOINSTRUCCION ::= TK_EJEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOINSTRUCCION ::= TK_TITULOX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOINSTRUCCION ::= TK_TITULOY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OTRAINSTRUCCION ::= OTRAINSTRUCCION INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAINSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OTRAINSTRUCCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAINSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
