
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import Clases.GraphLineParameters;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import org.jfree.data.category.DefaultCategoryDataset;
import java.util.Map;
import java.util.Arrays;
import Clases.graphParameters;
import Clases.pieParameters;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\005\000" +
    "\002\004\004\000\002\004\002\000\002\055\002\000\002" +
    "\005\016\000\002\006\015\000\002\012\003\000\002\012" +
    "\003\000\002\007\004\000\002\010\006\000\002\011\005" +
    "\000\002\011\002\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\010\000\002\014" +
    "\010\000\002\014\010\000\002\014\010\000\002\014\010" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\015\006\000\002\015\006\000\002" +
    "\016\003\000\002\016\003\000\002\017\010\000\002\056" +
    "\002\000\002\020\007\000\002\020\010\000\002\021\003" +
    "\000\002\021\003\000\002\023\005\000\002\023\002\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\024\014\000\002\030\004\000\002\030" +
    "\002\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\012\000" +
    "\002\033\012\000\002\034\012\000\002\035\012\000\002" +
    "\036\012\000\002\025\014\000\002\037\004\000\002\037" +
    "\002\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\047\012\000\002\041\012\000\002\046\012\000" +
    "\002\026\014\000\002\042\004\000\002\042\002\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\050\012\000\002\051\012" +
    "\000\002\052\012\000\002\053\012\000\002\054\012\000" +
    "\002\027\014\000\002\044\004\000\002\044\002\000\002" +
    "\045\003\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\004\020\004\001\002\000\050\003\036\021" +
    "\026\025\037\026\040\027\034\030\025\031\016\032\030" +
    "\033\007\034\013\035\015\036\027\037\024\040\021\041" +
    "\033\044\031\045\022\046\043\047\035\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\004\013" +
    "\u012f\001\002\000\052\003\uffce\021\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\001\002\000\052\003\ufffd\021" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\001\002" +
    "\000\052\003\ufffe\021\ufffe\024\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\001\002\000\004\013\u012c\001\002\000\052" +
    "\003\ufffa\021\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\001\002\000\004\013\u0129\001\002\000\004\013\u0124" +
    "\001\002\000\052\003\ufff7\021\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\001\002\000\052\003\uffff\021\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\044\uffff\045\uffff\046\uffff\047\uffff\001\002\000" +
    "\004\013\u011d\001\002\000\004\013\u0100\001\002\000\052" +
    "\003\ufffc\021\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\001\002\000\004\013\375\001\002\000\004\013\370" +
    "\001\002\000\004\004\355\001\002\000\004\013\350\001" +
    "\002\000\004\013\343\001\002\000\004\013\264\001\002" +
    "\000\052\003\uffd0\021\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\001\002\000\004\004\242\001\002\000\004" +
    "\013\235\001\002\000\004\013\201\001\002\000\004\024" +
    "\177\001\002\000\004\004\165\001\002\000\004\013\160" +
    "\001\002\000\052\003\uffcf\021\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\001\002\000\052\003\ufffb\021\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\001\002\000" +
    "\004\013\045\001\002\000\052\003\uffd1\021\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\001\002\000\016\050" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\001\002" +
    "\000\016\050\054\051\055\052\052\053\061\054\060\055" +
    "\053\001\002\000\016\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\001\002\000\016\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\001\002\000\016\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\001\002\000" +
    "\004\004\151\001\002\000\004\046\143\001\002\000\004" +
    "\004\134\001\002\000\004\004\114\001\002\000\016\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\001\002" +
    "\000\016\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\001\002\000\004\004\105\001\002\000\004\004\063" +
    "\001\002\000\016\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\001\002\000\004\004\064\001\002\000\006" +
    "\022\066\023\065\001\002\000\006\004\ufff3\016\ufff3\001" +
    "\002\000\006\004\ufff2\016\ufff2\001\002\000\004\016\070" +
    "\001\002\000\042\012\074\026\040\027\034\030\025\031" +
    "\016\032\030\033\007\034\013\035\015\036\027\037\024" +
    "\040\021\060\075\061\072\062\077\063\100\001\002\000" +
    "\014\011\uffe9\014\uffe9\015\uffe9\017\uffe9\024\uffe9\001\002" +
    "\000\014\011\uffec\014\uffec\015\uffec\017\uffec\024\uffec\001" +
    "\002\000\014\011\uffe7\014\uffe7\015\uffe7\017\uffe7\024\uffe7" +
    "\001\002\000\004\063\104\001\002\000\014\011\uffed\014" +
    "\uffed\015\uffed\017\uffed\024\uffed\001\002\000\014\011\uffe8" +
    "\014\uffe8\015\uffe8\017\uffe8\024\uffe8\001\002\000\014\011" +
    "\uffeb\014\uffeb\015\uffeb\017\uffeb\024\uffeb\001\002\000\014" +
    "\011\uffea\014\uffea\015\uffea\017\uffea\024\uffea\001\002\000" +
    "\004\024\102\001\002\000\004\007\103\001\002\000\016" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\001" +
    "\002\000\016\005\ufff1\011\ufff1\014\ufff1\015\ufff1\017\ufff1" +
    "\024\ufff1\001\002\000\004\004\106\001\002\000\006\022" +
    "\066\023\065\001\002\000\004\016\110\001\002\000\042" +
    "\012\074\026\040\027\034\030\025\031\016\032\030\033" +
    "\007\034\013\035\015\036\027\037\024\040\021\060\075" +
    "\061\072\062\077\063\100\001\002\000\004\024\112\001" +
    "\002\000\004\007\113\001\002\000\016\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\001\002\000\004\004" +
    "\115\001\002\000\006\022\066\023\065\001\002\000\004" +
    "\016\117\001\002\000\006\010\123\012\074\001\002\000" +
    "\004\024\uffd5\001\002\000\004\024\uffd4\001\002\000\004" +
    "\024\132\001\002\000\042\012\074\026\040\027\034\030" +
    "\025\031\016\032\030\033\007\034\013\035\015\036\027" +
    "\037\024\040\021\060\075\061\072\062\077\063\100\001" +
    "\002\000\006\011\uffee\015\126\001\002\000\004\011\131" +
    "\001\002\000\042\012\074\026\040\027\034\030\025\031" +
    "\016\032\030\033\007\034\013\035\015\036\027\037\024" +
    "\040\021\060\075\061\072\062\077\063\100\001\002\000" +
    "\006\011\uffee\015\126\001\002\000\004\011\uffef\001\002" +
    "\000\006\014\ufff0\024\ufff0\001\002\000\004\007\133\001" +
    "\002\000\016\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\001\002\000\004\004\135\001\002\000\006\022" +
    "\066\023\065\001\002\000\004\016\137\001\002\000\042" +
    "\012\074\026\040\027\034\030\025\031\016\032\030\033" +
    "\007\034\013\035\015\036\027\037\024\040\021\060\075" +
    "\061\072\062\077\063\100\001\002\000\004\024\141\001" +
    "\002\000\004\007\142\001\002\000\016\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\001\002\000\004\024" +
    "\144\001\002\000\004\007\145\001\002\000\004\014\146" +
    "\001\002\000\004\024\147\001\002\000\004\007\150\001" +
    "\002\000\052\003\uffb7\021\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\001\002\000\004\004\152\001\002\000" +
    "\006\022\066\023\065\001\002\000\004\016\154\001\002" +
    "\000\006\010\123\012\074\001\002\000\004\024\156\001" +
    "\002\000\004\007\157\001\002\000\016\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\001\002\000\042\012" +
    "\074\026\040\027\034\030\025\031\016\032\030\033\007" +
    "\034\013\035\015\036\027\037\024\040\021\060\075\061" +
    "\072\062\077\063\100\001\002\000\004\015\162\001\002" +
    "\000\042\012\074\026\040\027\034\030\025\031\016\032" +
    "\030\033\007\034\013\035\015\036\027\037\024\040\021" +
    "\060\075\061\072\062\077\063\100\001\002\000\004\014" +
    "\164\001\002\000\062\003\uffe6\011\uffe6\014\uffe6\015\uffe6" +
    "\017\uffe6\021\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\001\002\000\006\022\066\023\065\001\002\000\004" +
    "\004\167\001\002\000\004\004\170\001\002\000\004\012" +
    "\074\001\002\000\004\005\172\001\002\000\004\017\173" +
    "\001\002\000\004\010\123\001\002\000\004\024\175\001" +
    "\002\000\004\007\176\001\002\000\052\003\ufff4\021\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\001\002\000" +
    "\004\007\200\001\002\000\052\003\ufff9\021\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\047\ufff9\001\002\000\010\050" +
    "\uffa8\055\uffa8\056\uffa8\001\002\000\010\050\207\055\204" +
    "\056\206\001\002\000\010\050\uffa6\055\uffa6\056\uffa6\001" +
    "\002\000\004\047\227\001\002\000\010\050\uffa9\055\uffa9" +
    "\056\uffa9\001\002\000\004\004\220\001\002\000\004\004" +
    "\211\001\002\000\010\050\uffa7\055\uffa7\056\uffa7\001\002" +
    "\000\004\004\212\001\002\000\006\022\066\023\065\001" +
    "\002\000\004\016\214\001\002\000\042\012\074\026\040" +
    "\027\034\030\025\031\016\032\030\033\007\034\013\035" +
    "\015\036\027\037\024\040\021\060\075\061\072\062\077" +
    "\063\100\001\002\000\004\024\216\001\002\000\004\007" +
    "\217\001\002\000\020\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\001\002\000\004\004\221\001" +
    "\002\000\006\022\066\023\065\001\002\000\004\016\223" +
    "\001\002\000\006\010\123\012\074\001\002\000\004\024" +
    "\225\001\002\000\004\007\226\001\002\000\012\050\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\001\002\000\004\024\230\001" +
    "\002\000\004\007\231\001\002\000\004\014\232\001\002" +
    "\000\004\024\233\001\002\000\004\007\234\001\002\000" +
    "\052\003\uffaa\021\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\001\002\000\042\012\074\026\040\027\034\030" +
    "\025\031\016\032\030\033\007\034\013\035\015\036\027" +
    "\037\024\040\021\060\075\061\072\062\077\063\100\001" +
    "\002\000\004\015\237\001\002\000\042\012\074\026\040" +
    "\027\034\030\025\031\016\032\030\033\007\034\013\035" +
    "\015\036\027\037\024\040\021\060\075\061\072\062\077" +
    "\063\100\001\002\000\004\014\241\001\002\000\062\003" +
    "\uffe5\011\uffe5\014\uffe5\015\uffe5\017\uffe5\021\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\001\002\000\004\004" +
    "\243\001\002\000\006\042\244\043\246\001\002\000\004" +
    "\016\256\001\002\000\004\024\254\001\002\000\004\016" +
    "\247\001\002\000\042\012\074\026\040\027\034\030\025" +
    "\031\016\032\030\033\007\034\013\035\015\036\027\037" +
    "\024\040\021\060\075\061\072\062\077\063\100\001\002" +
    "\000\004\017\251\001\002\000\004\006\252\001\002\000" +
    "\006\010\123\012\074\001\002\000\004\024\uffd6\001\002" +
    "\000\004\007\255\001\002\000\052\003\uffd9\021\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\001\002\000\042" +
    "\012\074\026\040\027\034\030\025\031\016\032\030\033" +
    "\007\034\013\035\015\036\027\037\024\040\021\060\075" +
    "\061\072\062\077\063\100\001\002\000\006\015\uffd8\024" +
    "\uffd8\001\002\000\006\015\uffd2\024\uffd2\001\002\000\006" +
    "\015\262\024\uffd7\001\002\000\042\012\074\026\040\027" +
    "\034\030\025\031\016\032\030\033\007\034\013\035\015" +
    "\036\027\037\024\040\021\060\075\061\072\062\077\063" +
    "\100\001\002\000\006\015\uffd3\024\uffd3\001\002\000\016" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\001" +
    "\002\000\016\050\207\051\272\052\271\053\276\054\275" +
    "\055\270\001\002\000\016\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\001\002\000\016\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\001\002\000\004\044" +
    "\335\001\002\000\004\004\326\001\002\000\004\004\317" +
    "\001\002\000\016\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\001\002\000\016\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\001\002\000\004\004\310\001" +
    "\002\000\004\004\301\001\002\000\016\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\001\002\000\016\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\001\002" +
    "\000\004\004\302\001\002\000\006\022\066\023\065\001" +
    "\002\000\004\016\304\001\002\000\042\012\074\026\040" +
    "\027\034\030\025\031\016\032\030\033\007\034\013\035" +
    "\015\036\027\037\024\040\021\060\075\061\072\062\077" +
    "\063\100\001\002\000\004\024\306\001\002\000\004\007" +
    "\307\001\002\000\016\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\001\002\000\004\004\311\001\002\000" +
    "\006\022\066\023\065\001\002\000\004\016\313\001\002" +
    "\000\042\012\074\026\040\027\034\030\025\031\016\032" +
    "\030\033\007\034\013\035\015\036\027\037\024\040\021" +
    "\060\075\061\072\062\077\063\100\001\002\000\004\024" +
    "\315\001\002\000\004\007\316\001\002\000\016\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\001\002\000" +
    "\004\004\320\001\002\000\006\022\066\023\065\001\002" +
    "\000\004\016\322\001\002\000\006\010\123\012\074\001" +
    "\002\000\004\024\324\001\002\000\004\007\325\001\002" +
    "\000\016\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\001\002\000\004\004\327\001\002\000\006\022\066" +
    "\023\065\001\002\000\004\016\331\001\002\000\006\010" +
    "\123\012\074\001\002\000\004\024\333\001\002\000\004" +
    "\007\334\001\002\000\016\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\001\002\000\004\024\336\001\002" +
    "\000\004\007\337\001\002\000\004\014\340\001\002\000" +
    "\004\024\341\001\002\000\004\007\342\001\002\000\052" +
    "\003\uffcd\021\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\001\002\000\042\012\074\026\040\027\034\030\025" +
    "\031\016\032\030\033\007\034\013\035\015\036\027\037" +
    "\024\040\021\060\075\061\072\062\077\063\100\001\002" +
    "\000\004\015\345\001\002\000\042\012\074\026\040\027" +
    "\034\030\025\031\016\032\030\033\007\034\013\035\015" +
    "\036\027\037\024\040\021\060\075\061\072\062\077\063" +
    "\100\001\002\000\004\014\347\001\002\000\062\003\uffe2" +
    "\011\uffe2\014\uffe2\015\uffe2\017\uffe2\021\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\001\002\000\006\010\123" +
    "\012\074\001\002\000\004\014\uffda\001\002\000\004\014" +
    "\uffdb\001\002\000\004\014\354\001\002\000\062\003\uffde" +
    "\011\uffde\014\uffde\015\uffde\017\uffde\021\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\001\002\000\006\022\066" +
    "\023\065\001\002\000\004\004\357\001\002\000\004\004" +
    "\360\001\002\000\004\063\361\001\002\000\004\005\362" +
    "\001\002\000\004\017\363\001\002\000\042\012\074\026" +
    "\040\027\034\030\025\031\016\032\030\033\007\034\013" +
    "\035\015\036\027\037\024\040\021\060\075\061\072\062" +
    "\077\063\100\001\002\000\004\024\ufff6\001\002\000\004" +
    "\024\366\001\002\000\004\007\367\001\002\000\052\003" +
    "\ufff5\021\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5" +
    "\001\002\000\042\012\074\026\040\027\034\030\025\031" +
    "\016\032\030\033\007\034\013\035\015\036\027\037\024" +
    "\040\021\060\075\061\072\062\077\063\100\001\002\000" +
    "\004\015\372\001\002\000\042\012\074\026\040\027\034" +
    "\030\025\031\016\032\030\033\007\034\013\035\015\036" +
    "\027\037\024\040\021\060\075\061\072\062\077\063\100" +
    "\001\002\000\004\014\374\001\002\000\062\003\uffe4\011" +
    "\uffe4\014\uffe4\015\uffe4\017\uffe4\021\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\001\002\000\006\010\123\012" +
    "\074\001\002\000\004\014\377\001\002\000\062\003\uffdd" +
    "\011\uffdd\014\uffdd\015\uffdd\017\uffdd\021\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\001\002\000\012\050\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\001\002\000\012\050\u0107\055" +
    "\u0104\056\206\057\u0103\001\002\000\012\050\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\001\002\000\004\004\u0116\001\002\000" +
    "\004\045\u0110\001\002\000\012\050\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\001\002\000\012\050\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\001\002\000\004\004\u0109\001\002\000\012\050\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\001\002\000\004\004\u010a\001" +
    "\002\000\006\022\066\023\065\001\002\000\004\016\u010c" +
    "\001\002\000\042\012\074\026\040\027\034\030\025\031" +
    "\016\032\030\033\007\034\013\035\015\036\027\037\024" +
    "\040\021\060\075\061\072\062\077\063\100\001\002\000" +
    "\004\024\u010e\001\002\000\004\007\u010f\001\002\000\012" +
    "\050\uffba\055\uffba\056\uffba\057\uffba\001\002\000\004\024" +
    "\u0111\001\002\000\004\007\u0112\001\002\000\004\014\u0113" +
    "\001\002\000\004\024\u0114\001\002\000\004\007\u0115\001" +
    "\002\000\052\003\uffc0\021\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\001\002\000\004\004\u0117\001\002\000" +
    "\006\022\066\023\065\001\002\000\004\016\u0119\001\002" +
    "\000\006\010\123\012\074\001\002\000\004\024\u011b\001" +
    "\002\000\004\007\u011c\001\002\000\012\050\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\001\002\000\006\010\123\012\074\001" +
    "\002\000\004\014\u011f\001\002\000\062\003\uffdc\011\uffdc" +
    "\014\uffdc\015\uffdc\017\uffdc\021\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\001\002\000\052\003\036\021\026" +
    "\024\u0122\025\037\026\040\027\034\030\025\031\016\032" +
    "\030\033\007\034\013\035\015\036\027\037\024\040\021" +
    "\041\033\044\031\045\022\046\043\047\035\001\002\000" +
    "\052\003\ufff8\021\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\001\002\000\004\020\u0123\001\002\000\004\002" +
    "\000\001\002\000\042\012\074\026\040\027\034\030\025" +
    "\031\016\032\030\033\007\034\013\035\015\036\027\037" +
    "\024\040\021\060\075\061\072\062\077\063\100\001\002" +
    "\000\004\015\u0126\001\002\000\042\012\074\026\040\027" +
    "\034\030\025\031\016\032\030\033\007\034\013\035\015" +
    "\036\027\037\024\040\021\060\075\061\072\062\077\063" +
    "\100\001\002\000\004\014\u0128\001\002\000\062\003\uffe3" +
    "\011\uffe3\014\uffe3\015\uffe3\017\uffe3\021\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\001\002\000\006\010\123" +
    "\012\074\001\002\000\004\014\u012b\001\002\000\062\003" +
    "\uffdf\011\uffdf\014\uffdf\015\uffdf\017\uffdf\021\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\001\002\000\006\010" +
    "\123\012\074\001\002\000\004\014\u012e\001\002\000\062" +
    "\003\uffe0\011\uffe0\014\uffe0\015\uffe0\017\uffe0\021\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\001\002\000\006" +
    "\010\123\012\074\001\002\000\004\014\u0131\001\002\000" +
    "\062\003\uffe1\011\uffe1\014\uffe1\015\uffe1\017\uffe1\021\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\004\002\004\001\001\000\030\003\016\005" +
    "\017\006\011\014\010\015\022\017\041\022\013\024\043" +
    "\025\031\026\040\027\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\045\001" +
    "\001\000\016\043\050\050\055\051\047\052\061\053\046" +
    "\054\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\075" +
    "\013\100\014\070\015\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\106\001" +
    "\001\000\002\001\001\000\012\007\075\013\110\014\070" +
    "\015\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\115\001\001" +
    "\000\002\001\001\000\010\007\117\010\120\021\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\075\013\123\014\070\015\072\001\001\000" +
    "\004\011\124\001\001\000\002\001\001\000\012\007\075" +
    "\013\126\014\070\015\072\001\001\000\004\011\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\135\001" +
    "\001\000\002\001\001\000\012\007\075\013\137\014\070" +
    "\015\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\152\001\001\000\002" +
    "\001\001\000\010\007\117\010\120\021\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\075\013\160\014\070\015\072\001\001\000\002\001" +
    "\001\000\012\007\075\013\162\014\070\015\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\201\001\001\000\010\032\207\041\202\045\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\212\001\001\000\002\001\001\000" +
    "\012\007\075\013\214\014\070\015\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\221\001\001\000\002\001\001\000\010" +
    "\007\117\010\120\021\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\075\013\235\014\070" +
    "\015\072\001\001\000\002\001\001\000\012\007\075\013" +
    "\237\014\070\015\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\075\013\247\014\070\015\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\117\010\120\021\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\075\013\256\014\070\015\072\001\001" +
    "\000\004\056\257\001\001\000\004\023\260\001\001\000" +
    "\002\001\001\000\012\007\075\013\262\014\070\015\072" +
    "\001\001\000\002\001\001\000\004\030\264\001\001\000" +
    "\016\031\276\032\277\033\266\034\265\035\273\036\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\302\001\001\000\002\001\001\000\012\007\075\013" +
    "\304\014\070\015\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\311\001\001\000\002\001\001\000\012\007\075\013\313" +
    "\014\070\015\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\320" +
    "\001\001\000\002\001\001\000\010\007\117\010\120\021" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\327\001\001\000" +
    "\002\001\001\000\010\007\117\010\120\021\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\075\013\343\014\070\015\072\001\001\000\002\001\001" +
    "\000\012\007\075\013\345\014\070\015\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\351\010\350" +
    "\016\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\075\013\363" +
    "\014\070\015\072\001\001\000\004\055\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\075\013\370\014\070\015\072\001\001\000\002\001" +
    "\001\000\012\007\075\013\372\014\070\015\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\351\010" +
    "\350\016\375\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\u0100\001\001\000\012\040\u0104\041\u0101\046" +
    "\u0107\047\u0105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u010a\001\001\000\002\001\001\000\012\007\075\013" +
    "\u010c\014\070\015\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0117\001" +
    "\001\000\002\001\001\000\010\007\117\010\120\021\u0119" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\351\010\350\016\u011d\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\u0120\005\017\006" +
    "\011\014\010\015\022\017\041\022\013\024\043\025\031" +
    "\026\040\027\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\075\013\u0124\014\070" +
    "\015\072\001\001\000\002\001\001\000\012\007\075\013" +
    "\u0126\014\070\015\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\351\010\350\016\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\351\010\350" +
    "\016\u012c\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\351\010\350\016\u012f\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    StringBuilder printString = new StringBuilder();
    HashMap<Object,Object> data = new HashMap<>(); 

    Graficador graficaM = new Graficador();

    graphParameters parametro = new graphParameters();
    pieParameters parametroPie = new pieParameters();
    GraphLineParameters parametroLine = new GraphLineParameters();

    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico irrecuperable: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
    }
    public void addPrintExpression(String expr) {
        printString.append(expr);
    }
     public String getImpresiones() {
        return printString.toString();
    }

    





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String codigoUsr="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TK_PROGRAM CODIGO OTROCODIGO TK_END TK_PROGRAM 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= ARREGLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= ESTADISTICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= GRAFICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODIGO ::= error TK_END PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OTROCODIGO ::= OTROCODIGO CODIGO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTROCODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OTROCODIGO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTROCODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE ::= TK_VAR DOSP TIPO DOSP DOSP NOMBRES MENORQ MENOS EXPRESION NT$0 TK_END PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

    data.put(n.toString(), e);
    for (Object clave : data.keySet()) {
        System.out.println("Clave: " + clave.toString() + " |    Valor: " + data.get(clave).toString());
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARREGLO ::= TK_ARR DOSP TIPO DOSP DOSP IDARREGLO MENORQ MENOS LISTA_VALORES TK_END PYCOMA 
            {
              Object RESULT =null;
		int Atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int Atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object At = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int Aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Airight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object Ai = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    data.put(Ai, Av);
    ArrayList<Object> miLista = (ArrayList<Object>) data.get(Ai);
    for(Object valor: miLista){
        System.out.println("Valores para: "+Ai+" son:"+valor);
    }
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= TK_CHAR 
            {
              Object RESULT =null;
		 RESULT = "char[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= TK_CADENA 
            {
              Object RESULT =null;
		 RESULT = "String"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IDARREGLO ::= ARRB NOMBRES 
            {
              Object RESULT =null;
		int nombreAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombreA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = nombreA;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDARREGLO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_VALORES ::= CORA EXPRESION OTRA_EXPRESION CORC 
            {
              Object RESULT =null;
		int Leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Loeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Loeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object Loe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Object> lista = new ArrayList<>();
    lista.add(Le);//este añade el primer valor que se obtiene
    lista.addAll((Collection<? extends Object>) Loe); //esto indica que Loe puede ser cualquier cosa que sea de tipo Object
    
    RESULT = lista;
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OTRA_EXPRESION ::= COMA EXPRESION OTRA_EXPRESION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otraexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otraexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object otraexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Object> lista;
    if (otraexp == null) {
        lista = new ArrayList<>();
    } else {
        lista = (ArrayList<Object>) otraexp;
    }
    lista.add(0,exp);
    RESULT = lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_EXPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OTRA_EXPRESION ::= 
            {
              Object RESULT =null;
		
    RESULT = new ArrayList<>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_EXPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= ENTEROS 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= DECIMAL 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= STRINGT 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= NOMBRES 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            RESULT=data.get(E); 
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= OPERACION 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= IDARREGLO 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //Para cuando sean arreglos guarlos y retornar el arreglo
                           ArrayList<Object> datos = (ArrayList<Object>) data.get(E);
                            RESULT = datos; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= ESTADISTICA 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION ::= TK_SUM PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int ns1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ns1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ns1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ns2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ns2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ns2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    double n1 = Double.parseDouble(ns1.toString());
                    double n2 = Double.parseDouble(ns2.toString());
                    RESULT = n1 + n2;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= TK_RES PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nr1.toString());
                        double n2 = Double.parseDouble(nr2.toString());
                        RESULT = n1 - n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION ::= TK_MUL PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nm1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nm2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nm1.toString());
                        double n2 = Double.parseDouble(nm2.toString());
                        RESULT = n1 * n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION ::= TK_DIV PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nd1.toString());
                        double n2 = Double.parseDouble(nd2.toString());
                        RESULT = n1 / n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= TK_MOD PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int mn1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mn1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mn1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mn2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mn2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mn2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(mn1.toString());
                        double n2 = Double.parseDouble(mn2.toString());
                        RESULT = n1 % n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ESTADISTICA ::= TK_MEDIA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    double sum = 0;
                    int count = 0;
                    for (Object valor : datosC) {
                            sum += Double.parseDouble(valor.toString());
                            count++;
                        
                    }
                    double media = sum / count ;
                    RESULT = media;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTADISTICA ::= TK_MEDIANA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    double mediana = 0;
                    int size = datosC.size();
                    if (size % 2 == 0) {
                        mediana = (Double.parseDouble(datosC.get(size / 2 - 1).toString()) + Double.parseDouble(datosC.get(size / 2).toString())) / 2;
                    } else {
                        mediana = Double.parseDouble(datosC.get(size / 2).toString());
                    }
                    RESULT = mediana;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESTADISTICA ::= TK_MODA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    int maximoVeces = 0;
                    double moda = 0;
                    for (int i = 0; i < datosC.size(); i++) {
                        int veces = 0;
                        for (int j = 0; j < datosC.size(); j++) {
                            if (datosC.get(i).equals(datosC.get(j))) {
                                veces++;
                            }
                        }
                        if (veces > maximoVeces) {
                            moda = Double.parseDouble(datosC.get(i).toString());
                            maximoVeces = veces;
                        }
                    }
                    RESULT = moda;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTADISTICA ::= TK_VARIANZA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    //para la varianza se necesita calcular la media aritmetica
                    double sum = 0;
                    for (Object valor : datosC) {
                            sum += Double.parseDouble(valor.toString());                      
                    }
                    double media = sum / datosC.size() ;
                    // por cada dato RESTAR este valor y elevar al cuadrado
                    double SUMparentesisCuadrados = 0;
                    for(Object valor: datosC){
                        double par = Double.parseDouble(valor.toString()) - media;
                        SUMparentesisCuadrados += par * par;
                    }
                    double varianza = SUMparentesisCuadrados /datosC.size();
                    RESULT = varianza;
                    

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESTADISTICA ::= TK_MAX PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    Double maxV = Double.parseDouble(datosC.get(0).toString());
                    for(Object obj:datosC){
                    double num = Double.parseDouble(obj.toString());
                    if(num > maxV){
                        maxV = num;
                    }
                    }
                    RESULT = maxV;
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ESTADISTICA ::= TK_MIN PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    Double minV =  Double.parseDouble(datosC.get(0).toString());
                    for(Object obj:datosC){
                    double num = Double.parseDouble(obj.toString());
                    if(num < minV){
                        minV = num;
                    }
                    }
                    RESULT = minV;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DATOS ::= IDARREGLO 
            {
              Object RESULT =null;
		int arrIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Object> datos = (ArrayList<Object>) data.get(arrID);
        RESULT = datos;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DATOS ::= LISTA_VALORES 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMPRESION ::= TK_CONSOLE DOSP DOSP TIPOIMPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		 addPrintExpression("\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 addPrintExpression(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOIMPRESION ::= TK_PRINT IGUAL EXPRESION NT$1 OTRAEXPRESIONIMP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIMPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOIMPRESION ::= TK_COLUMN IGUAL EXPRESION MENOS MAYORQ ARREGLOIMP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ArrayList<Object> datosImp = (ArrayList<Object>) arreglo;
                    //Aca quiero meter los datos del arreglo donde el titulo sera el e.toString()
                    //y los datos del arreglo agregar cada uno al addPrintExpression con salto de linea al final de cada uno
                    addPrintExpression("---------------------\n");
                    addPrintExpression(e.toString());
                    addPrintExpression("\n");
                    addPrintExpression("---------------------\n");
                    for(Object dato: datosImp){
                        addPrintExpression(dato.toString());
                        addPrintExpression("\n");
                    }
                    addPrintExpression("---------------------\n");

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIMPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARREGLOIMP ::= IDARREGLO 
            {
              Object RESULT =null;
		int arrIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Object> datos = (ArrayList<Object>) data.get(arrID);
        RESULT = datos;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOIMP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARREGLOIMP ::= LISTA_VALORES 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOIMP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OTRAEXPRESIONIMP ::= OTRAEXPRESIONIMP COMA EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addPrintExpression(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAEXPRESIONIMP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OTRAEXPRESIONIMP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAEXPRESIONIMP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // GRAFICA ::= GRAPHBAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // GRAFICA ::= GRAPHPIE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // GRAFICA ::= GRAPHLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // GRAFICA ::= HISTOGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // GRAPHBAR ::= TK_GRAPHBAR PARA INSTRUCCIONESGB TK_EXEC TK_GRAPHBAR TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;
		
                ArrayList<String> ejeX = parametro.getEjeX();
                ArrayList<Double> ejeY = parametro.getEjeY();
                String titulo = parametro.getTitulo();
                String tituloX = parametro.getTituloX();
                String tituloY = parametro.getTituloY();
                graficaM.crearGraphBarra(ejeY,titulo,ejeX,tituloX,tituloY);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPHBAR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCIONESGB ::= INSTRUCCIONESGB INSTRUCCIONB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGB",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCIONESGB ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGB",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCCIONB ::= TITULOGRAFICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCCIONB ::= EJEX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCIONB ::= EJEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCIONB ::= TITULOX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCIONB ::= TITULOY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TITULOGRAFICA ::= TK_TITULO DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    parametro.setTitulo(e.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOGRAFICA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EJEX ::= TK_EJEX DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Object> arrobj = (ArrayList<Object>) arr;
            ArrayList<String> datos = new ArrayList<>();
            for(Object dato: arrobj){
                datos.add(dato.toString());
            }
            parametro.setEjeX(datos);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJEX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EJEY ::= TK_EJEY DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Object> arrobj = (ArrayList<Object>) arr;
            ArrayList<Double> datos = new ArrayList<>();
            for(Object dato: arrobj){
                datos.add(Double.parseDouble(dato.toString()));
            }
            parametro.setEjeY(datos);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJEY",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TITULOX ::= TK_TITULOX DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            parametro.setTituloX(e.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOX",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TITULOY ::= TK_TITULOY DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            parametro.setTituloY(e.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOY",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GRAPHPIE ::= TK_GRAPHPIE PARA INSTRUCCIONESGP TK_EXEC TK_GRAPHPIE TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;
		
                ArrayList<String> labels = parametroPie.getLabels();
                ArrayList<Double> values = parametroPie.getValues();
                String titulo = parametroPie.getTitulo();
                graficaM.crearGraphPie(values,titulo,labels);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPHPIE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSTRUCCIONESGP ::= INSTRUCCIONESGP INSTRUCCIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INSTRUCCIONESGP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTRUCCIONP ::= TITULOGRAFICAPIE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTRUCCIONP ::= VALUESGRAPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUCCIONP ::= LABELGRAPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TITULOGRAFICAPIE ::= TK_TITULO DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    parametroPie.setTitulo(e.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOGRAFICAPIE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALUESGRAPH ::= TK_VALUES DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    ArrayList<Object> datos = (ArrayList<Object>) arr;
                    ArrayList<Double> datosD = new ArrayList<>();
                    for(Object dato: datos){
                        datosD.add(Double.parseDouble(dato.toString()));
                    }
                    parametroPie.setValues(datosD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUESGRAPH",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LABELGRAPH ::= TK_LABEL DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    ArrayList<Object> datos = (ArrayList<Object>) arr;
                    ArrayList<String> datosS = new ArrayList<>();
                    for(Object dato: datos){
                        datosS.add(dato.toString());
                    }
                    parametroPie.setLabels(datosS);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LABELGRAPH",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // GRAPHLINE ::= TK_GRAPHLINE PARA INSTRUCCIONESGL TK_EXEC TK_GRAPHLINE TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;
		
                ArrayList<String> ejeX = parametroLine.getEjeX();
                ArrayList<Double> ejeY = parametroLine.getEjeY();
                String titulo = parametroLine.getTitulo();
                String tituloX = parametroLine.getTituloX();
                String tituloY = parametroLine.getTituloY();
                graficaM.crearGraphLinea(ejeY,titulo,tituloX,tituloY,ejeX);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPHLINE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTRUCCIONESGL ::= INSTRUCCIONESGL INSTRUCCIONL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTRUCCIONESGL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTRUCCIONL ::= TITULOGRAFICALINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCCIONL ::= EJEXLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTRUCCIONL ::= EJEYLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCCIONL ::= TITULOXLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTRUCCIONL ::= TITULOYLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TITULOGRAFICALINEA ::= TK_TITULO DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    parametroLine.setTitulo(e.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOGRAFICALINEA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EJEXLINEA ::= TK_EJEX DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Object> arrobj = (ArrayList<Object>) arr;
            ArrayList<String> datos = new ArrayList<>();
            for(Object dato: arrobj){
                datos.add(dato.toString());
            }
            parametroLine.setEjeX(datos);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJEXLINEA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EJEYLINEA ::= TK_EJEY DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Object> arrobj = (ArrayList<Object>) arr;
            ArrayList<Double> datos = new ArrayList<>();
            for(Object dato: arrobj){
                datos.add(Double.parseDouble(dato.toString()));
            }
            parametroLine.setEjeY(datos);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJEYLINEA",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TITULOXLINEA ::= TK_TITULOX DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            parametroLine.setTituloX(e.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOXLINEA",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TITULOYLINEA ::= TK_TITULOY DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            parametroLine.setTituloY(e.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOYLINEA",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // HISTOGRAM ::= TK_HISTOGRAM PARA INSTRUCCIONESH TK_EXEC TK_HISTOGRAM TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HISTOGRAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCCIONESH ::= INSTRUCCIONESH INSTRUCCIONH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESH",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCCIONESH ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESH",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCCIONH ::= TITULOGRAFICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONH",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCCIONH ::= VALUESGRAPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONH",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
