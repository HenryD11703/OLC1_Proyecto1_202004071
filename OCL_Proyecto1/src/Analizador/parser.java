
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import org.jfree.data.category.DefaultCategoryDataset;
import java.util.Map;
import java.util.Arrays;
import Clases.graphParameters;
import Clases.pieParameters;
import Clases.GraphLineParameters;
import Clases.HistogramParameters;
import Clases.TablaFrecuencias;
import Clases.TablaSimbolos;
import Clases.TabErrores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\004\004\000\002\004\002\000\002" +
    "\057\002\000\002\005\016\000\002\006\015\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\007\004\000\002\010\006\000\002\011\005\000" +
    "\002\011\002\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\010\000\002\014\010" +
    "\000\002\014\010\000\002\014\010\000\002\014\010\000" +
    "\002\015\006\000\002\015\006\000\002\015\006\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\016" +
    "\003\000\002\016\003\000\002\017\010\000\002\060\002" +
    "\000\002\020\007\000\002\020\010\000\002\021\003\000" +
    "\002\021\003\000\002\023\005\000\002\023\002\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\024\014\000\002\030\004\000\002\030\002" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\012\000\002" +
    "\033\012\000\002\034\012\000\002\035\012\000\002\036" +
    "\012\000\002\025\014\000\002\037\004\000\002\037\002" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\047\012\000\002\041\012\000\002\046\012\000\002" +
    "\026\014\000\002\042\004\000\002\042\002\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\050\012\000\002\051\012\000" +
    "\002\052\012\000\002\053\012\000\002\054\012\000\002" +
    "\027\014\000\002\044\004\000\002\044\002\000\002\045" +
    "\003\000\002\045\003\000\002\056\012\000\002\055\012" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\006\003\005\020\004\001\002\000\050\003" +
    "\040\021\030\025\037\026\041\027\034\032\026\033\017" +
    "\034\031\035\011\036\014\037\015\040\027\041\025\042" +
    "\023\043\035\046\032\047\022\050\044\051\036\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\007\001\002\000" +
    "\004\002\001\001\002\000\052\003\uffcb\021\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000\004\013" +
    "\u0141\001\002\000\052\003\ufffd\021\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\001\002\000\052\003\ufffc\021" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002" +
    "\000\004\013\u013e\001\002\000\004\013\u013b\001\002\000" +
    "\052\003\ufff9\021\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\001\002\000\004\013\u0136\001\002\000\052\003" +
    "\ufff6\021\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\001\002\000\052\003\ufffe\021\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\046\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\001\002\000\004\013\u010d\001\002" +
    "\000\004\013\u010a\001\002\000\052\003\ufffb\021\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\001\002\000\004" +
    "\013\u0107\001\002\000\004\013\u0102\001\002\000\004\013" +
    "\375\001\002\000\004\004\362\001\002\000\004\013\355" +
    "\001\002\000\004\013\266\001\002\000\052\003\uffcd\021" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002" +
    "\000\004\013\261\001\002\000\004\004\237\001\002\000" +
    "\004\013\203\001\002\000\004\004\171\001\002\000\004" +
    "\007\170\001\002\000\004\013\163\001\002\000\052\003" +
    "\uffcc\021\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\001\002\000\052\003\ufffa\021\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\001\002\000\004\013\046\001\002" +
    "\000\052\003\uffce\021\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\001\002\000\016\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\001\002\000\016\052\055\053" +
    "\056\054\053\055\062\056\061\057\054\001\002\000\016" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\001" +
    "\002\000\016\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\001\002\000\016\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\001\002\000\004\004\154\001\002" +
    "\000\004\050\146\001\002\000\004\004\137\001\002\000" +
    "\004\004\117\001\002\000\016\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\001\002\000\016\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\001\002\000\004" +
    "\004\110\001\002\000\004\004\064\001\002\000\016\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\001\002" +
    "\000\004\004\065\001\002\000\012\022\071\023\070\030" +
    "\066\031\067\001\002\000\006\004\ufff0\016\ufff0\001\002" +
    "\000\006\004\uffef\016\uffef\001\002\000\006\004\ufff2\016" +
    "\ufff2\001\002\000\006\004\ufff1\016\ufff1\001\002\000\004" +
    "\016\073\001\002\000\042\012\077\026\041\027\034\032" +
    "\026\033\017\034\031\035\011\036\014\037\015\040\027" +
    "\041\025\042\023\062\100\063\075\064\102\065\103\001" +
    "\002\000\014\011\uffe6\014\uffe6\015\uffe6\017\uffe6\024\uffe6" +
    "\001\002\000\014\011\uffe9\014\uffe9\015\uffe9\017\uffe9\024" +
    "\uffe9\001\002\000\014\011\uffe4\014\uffe4\015\uffe4\017\uffe4" +
    "\024\uffe4\001\002\000\004\065\107\001\002\000\014\011" +
    "\uffea\014\uffea\015\uffea\017\uffea\024\uffea\001\002\000\014" +
    "\011\uffe5\014\uffe5\015\uffe5\017\uffe5\024\uffe5\001\002\000" +
    "\014\011\uffe8\014\uffe8\015\uffe8\017\uffe8\024\uffe8\001\002" +
    "\000\014\011\uffe7\014\uffe7\015\uffe7\017\uffe7\024\uffe7\001" +
    "\002\000\004\024\105\001\002\000\004\007\106\001\002" +
    "\000\016\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\001\002\000\016\005\uffee\011\uffee\014\uffee\015\uffee" +
    "\017\uffee\024\uffee\001\002\000\004\004\111\001\002\000" +
    "\012\022\071\023\070\030\066\031\067\001\002\000\004" +
    "\016\113\001\002\000\042\012\077\026\041\027\034\032" +
    "\026\033\017\034\031\035\011\036\014\037\015\040\027" +
    "\041\025\042\023\062\100\063\075\064\102\065\103\001" +
    "\002\000\004\024\115\001\002\000\004\007\116\001\002" +
    "\000\016\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\001\002\000\004\004\120\001\002\000\012\022\071" +
    "\023\070\030\066\031\067\001\002\000\004\016\122\001" +
    "\002\000\006\010\126\012\077\001\002\000\004\024\uffd2" +
    "\001\002\000\004\024\uffd1\001\002\000\004\024\135\001" +
    "\002\000\042\012\077\026\041\027\034\032\026\033\017" +
    "\034\031\035\011\036\014\037\015\040\027\041\025\042" +
    "\023\062\100\063\075\064\102\065\103\001\002\000\006" +
    "\011\uffeb\015\131\001\002\000\004\011\134\001\002\000" +
    "\042\012\077\026\041\027\034\032\026\033\017\034\031" +
    "\035\011\036\014\037\015\040\027\041\025\042\023\062" +
    "\100\063\075\064\102\065\103\001\002\000\006\011\uffeb" +
    "\015\131\001\002\000\004\011\uffec\001\002\000\006\014" +
    "\uffed\024\uffed\001\002\000\004\007\136\001\002\000\016" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\001" +
    "\002\000\004\004\140\001\002\000\012\022\071\023\070" +
    "\030\066\031\067\001\002\000\004\016\142\001\002\000" +
    "\042\012\077\026\041\027\034\032\026\033\017\034\031" +
    "\035\011\036\014\037\015\040\027\041\025\042\023\062" +
    "\100\063\075\064\102\065\103\001\002\000\004\024\144" +
    "\001\002\000\004\007\145\001\002\000\016\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\001\002\000\004" +
    "\024\147\001\002\000\004\007\150\001\002\000\004\014" +
    "\151\001\002\000\004\024\152\001\002\000\004\007\153" +
    "\001\002\000\052\003\uffb4\021\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\001\002\000\004\004\155\001\002" +
    "\000\012\022\071\023\070\030\066\031\067\001\002\000" +
    "\004\016\157\001\002\000\006\010\126\012\077\001\002" +
    "\000\004\024\161\001\002\000\004\007\162\001\002\000" +
    "\016\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\001\002\000\042\012\077\026\041\027\034\032\026\033" +
    "\017\034\031\035\011\036\014\037\015\040\027\041\025" +
    "\042\023\062\100\063\075\064\102\065\103\001\002\000" +
    "\004\015\165\001\002\000\042\012\077\026\041\027\034" +
    "\032\026\033\017\034\031\035\011\036\014\037\015\040" +
    "\027\041\025\042\023\062\100\063\075\064\102\065\103" +
    "\001\002\000\004\014\167\001\002\000\062\003\uffe3\011" +
    "\uffe3\014\uffe3\015\uffe3\017\uffe3\021\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\001\002\000\052\003\ufff8\021" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\001\002" +
    "\000\012\022\071\023\070\030\066\031\067\001\002\000" +
    "\004\004\173\001\002\000\004\004\174\001\002\000\004" +
    "\012\077\001\002\000\004\005\176\001\002\000\004\017" +
    "\177\001\002\000\004\010\126\001\002\000\004\024\201" +
    "\001\002\000\004\007\202\001\002\000\052\003\ufff3\021" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\001\002" +
    "\000\010\052\uffa5\057\uffa5\060\uffa5\001\002\000\010\052" +
    "\210\057\206\060\211\001\002\000\010\052\uffa4\057\uffa4" +
    "\060\uffa4\001\002\000\004\051\231\001\002\000\010\052" +
    "\uffa6\057\uffa6\060\uffa6\001\002\000\004\004\222\001\002" +
    "\000\004\004\213\001\002\000\010\052\uffa3\057\uffa3\060" +
    "\uffa3\001\002\000\004\004\214\001\002\000\012\022\071" +
    "\023\070\030\066\031\067\001\002\000\004\016\216\001" +
    "\002\000\006\010\126\012\077\001\002\000\004\024\220" +
    "\001\002\000\004\007\221\001\002\000\010\052\uffa1\057" +
    "\uffa1\060\uffa1\001\002\000\004\004\223\001\002\000\012" +
    "\022\071\023\070\030\066\031\067\001\002\000\004\016" +
    "\225\001\002\000\042\012\077\026\041\027\034\032\026" +
    "\033\017\034\031\035\011\036\014\037\015\040\027\041" +
    "\025\042\023\062\100\063\075\064\102\065\103\001\002" +
    "\000\004\024\227\001\002\000\004\007\230\001\002\000" +
    "\010\052\uffa2\057\uffa2\060\uffa2\001\002\000\004\024\232" +
    "\001\002\000\004\007\233\001\002\000\004\014\234\001" +
    "\002\000\004\024\235\001\002\000\004\007\236\001\002" +
    "\000\052\003\uffa7\021\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\001\002\000\004\004\240\001\002\000\006" +
    "\044\241\045\243\001\002\000\004\016\253\001\002\000" +
    "\004\024\251\001\002\000\004\016\244\001\002\000\042" +
    "\012\077\026\041\027\034\032\026\033\017\034\031\035" +
    "\011\036\014\037\015\040\027\041\025\042\023\062\100" +
    "\063\075\064\102\065\103\001\002\000\004\017\246\001" +
    "\002\000\004\006\247\001\002\000\006\010\126\012\077" +
    "\001\002\000\004\024\uffd3\001\002\000\004\007\252\001" +
    "\002\000\052\003\uffd6\021\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\001\002\000\042\012\077\026\041\027" +
    "\034\032\026\033\017\034\031\035\011\036\014\037\015" +
    "\040\027\041\025\042\023\062\100\063\075\064\102\065" +
    "\103\001\002\000\006\015\uffd5\024\uffd5\001\002\000\006" +
    "\015\uffcf\024\uffcf\001\002\000\006\015\257\024\uffd4\001" +
    "\002\000\042\012\077\026\041\027\034\032\026\033\017" +
    "\034\031\035\011\036\014\037\015\040\027\041\025\042" +
    "\023\062\100\063\075\064\102\065\103\001\002\000\006" +
    "\015\uffd0\024\uffd0\001\002\000\042\012\077\026\041\027" +
    "\034\032\026\033\017\034\031\035\011\036\014\037\015" +
    "\040\027\041\025\042\023\062\100\063\075\064\102\065" +
    "\103\001\002\000\004\015\263\001\002\000\042\012\077" +
    "\026\041\027\034\032\026\033\017\034\031\035\011\036" +
    "\014\037\015\040\027\041\025\042\023\062\100\063\075" +
    "\064\102\065\103\001\002\000\004\014\265\001\002\000" +
    "\062\003\uffe2\011\uffe2\014\uffe2\015\uffe2\017\uffe2\021\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\001\002\000" +
    "\016\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\001\002\000\016\052\275\053\274\054\273\055\301\056" +
    "\300\057\272\001\002\000\016\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\001\002\000\016\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002\000\004" +
    "\046\347\001\002\000\004\004\340\001\002\000\004\004" +
    "\331\001\002\000\004\004\322\001\002\000\016\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002\000" +
    "\016\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\001\002\000\004\004\313\001\002\000\004\004\304\001" +
    "\002\000\016\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\001\002\000\016\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\001\002\000\004\004\305\001\002" +
    "\000\012\022\071\023\070\030\066\031\067\001\002\000" +
    "\004\016\307\001\002\000\042\012\077\026\041\027\034" +
    "\032\026\033\017\034\031\035\011\036\014\037\015\040" +
    "\027\041\025\042\023\062\100\063\075\064\102\065\103" +
    "\001\002\000\004\024\311\001\002\000\004\007\312\001" +
    "\002\000\016\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\001\002\000\004\004\314\001\002\000\012\022" +
    "\071\023\070\030\066\031\067\001\002\000\004\016\316" +
    "\001\002\000\042\012\077\026\041\027\034\032\026\033" +
    "\017\034\031\035\011\036\014\037\015\040\027\041\025" +
    "\042\023\062\100\063\075\064\102\065\103\001\002\000" +
    "\004\024\320\001\002\000\004\007\321\001\002\000\016" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\001" +
    "\002\000\004\004\323\001\002\000\012\022\071\023\070" +
    "\030\066\031\067\001\002\000\004\016\325\001\002\000" +
    "\042\012\077\026\041\027\034\032\026\033\017\034\031" +
    "\035\011\036\014\037\015\040\027\041\025\042\023\062" +
    "\100\063\075\064\102\065\103\001\002\000\004\024\327" +
    "\001\002\000\004\007\330\001\002\000\016\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\001\002\000\004" +
    "\004\332\001\002\000\012\022\071\023\070\030\066\031" +
    "\067\001\002\000\004\016\334\001\002\000\006\010\126" +
    "\012\077\001\002\000\004\024\336\001\002\000\004\007" +
    "\337\001\002\000\016\052\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\001\002\000\004\004\341\001\002\000" +
    "\012\022\071\023\070\030\066\031\067\001\002\000\004" +
    "\016\343\001\002\000\006\010\126\012\077\001\002\000" +
    "\004\024\345\001\002\000\004\007\346\001\002\000\016" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\001" +
    "\002\000\004\024\350\001\002\000\004\007\351\001\002" +
    "\000\004\014\352\001\002\000\004\024\353\001\002\000" +
    "\004\007\354\001\002\000\052\003\uffca\021\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\001\002\000\042\012" +
    "\077\026\041\027\034\032\026\033\017\034\031\035\011" +
    "\036\014\037\015\040\027\041\025\042\023\062\100\063" +
    "\075\064\102\065\103\001\002\000\004\015\357\001\002" +
    "\000\042\012\077\026\041\027\034\032\026\033\017\034" +
    "\031\035\011\036\014\037\015\040\027\041\025\042\023" +
    "\062\100\063\075\064\102\065\103\001\002\000\004\014" +
    "\361\001\002\000\062\003\uffdf\011\uffdf\014\uffdf\015\uffdf" +
    "\017\uffdf\021\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\001\002\000\012\022\071\023\070\030\066\031\067" +
    "\001\002\000\004\004\364\001\002\000\004\004\365\001" +
    "\002\000\004\065\366\001\002\000\004\005\367\001\002" +
    "\000\004\017\370\001\002\000\042\012\077\026\041\027" +
    "\034\032\026\033\017\034\031\035\011\036\014\037\015" +
    "\040\027\041\025\042\023\062\100\063\075\064\102\065" +
    "\103\001\002\000\004\024\ufff5\001\002\000\004\024\373" +
    "\001\002\000\004\007\374\001\002\000\052\003\ufff4\021" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\001\002" +
    "\000\006\010\126\012\077\001\002\000\004\014\uffd7\001" +
    "\002\000\004\014\uffd8\001\002\000\004\014\u0101\001\002" +
    "\000\062\003\uffdb\011\uffdb\014\uffdb\015\uffdb\017\uffdb\021" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\001\002" +
    "\000\042\012\077\026\041\027\034\032\026\033\017\034" +
    "\031\035\011\036\014\037\015\040\027\041\025\042\023" +
    "\062\100\063\075\064\102\065\103\001\002\000\004\015" +
    "\u0104\001\002\000\042\012\077\026\041\027\034\032\026" +
    "\033\017\034\031\035\011\036\014\037\015\040\027\041" +
    "\025\042\023\062\100\063\075\064\102\065\103\001\002" +
    "\000\004\014\u0106\001\002\000\062\003\uffe1\011\uffe1\014" +
    "\uffe1\015\uffe1\017\uffe1\021\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\001\002\000\006\010\126\012\077\001" +
    "\002\000\004\014\u0109\001\002\000\062\003\uffda\011\uffda" +
    "\014\uffda\015\uffda\017\uffda\021\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\046\uffda\047" +
    "\uffda\050\uffda\051\uffda\001\002\000\006\010\126\012\077" +
    "\001\002\000\004\014\u010c\001\002\000\062\003\uffd9\011" +
    "\uffd9\014\uffd9\015\uffd9\017\uffd9\021\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\001\002\000\012\052\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\001\002\000\012\052\u0115\057\u0110" +
    "\060\u0113\061\u0111\001\002\000\012\052\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\001\002\000\004\047\u012c\001\002\000\004" +
    "\004\u0125\001\002\000\012\052\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\001\002\000\004\004\u011e\001\002\000\012\052\uffba" +
    "\057\uffba\060\uffba\061\uffba\001\002\000\004\004\u0117\001" +
    "\002\000\012\052\uffb8\057\uffb8\060\uffb8\061\uffb8\001\002" +
    "\000\004\004\u0118\001\002\000\012\022\071\023\070\030" +
    "\066\031\067\001\002\000\004\016\u011a\001\002\000\042" +
    "\012\077\026\041\027\034\032\026\033\017\034\031\035" +
    "\011\036\014\037\015\040\027\041\025\042\023\062\100" +
    "\063\075\064\102\065\103\001\002\000\004\024\u011c\001" +
    "\002\000\004\007\u011d\001\002\000\012\052\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\001\002\000\004\004\u011f\001\002\000" +
    "\012\022\071\023\070\030\066\031\067\001\002\000\004" +
    "\016\u0121\001\002\000\006\010\126\012\077\001\002\000" +
    "\004\024\u0123\001\002\000\004\007\u0124\001\002\000\012" +
    "\052\uffb6\057\uffb6\060\uffb6\061\uffb6\001\002\000\004\004" +
    "\u0126\001\002\000\012\022\071\023\070\030\066\031\067" +
    "\001\002\000\004\016\u0128\001\002\000\006\010\126\012" +
    "\077\001\002\000\004\024\u012a\001\002\000\004\007\u012b" +
    "\001\002\000\012\052\uffb5\057\uffb5\060\uffb5\061\uffb5\001" +
    "\002\000\004\024\u012d\001\002\000\004\007\u012e\001\002" +
    "\000\004\014\u012f\001\002\000\004\024\u0130\001\002\000" +
    "\004\007\u0131\001\002\000\052\003\uffbd\021\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\001\002\000\052\003" +
    "\040\021\030\024\u0134\025\037\026\041\027\034\032\026" +
    "\033\017\034\031\035\011\036\014\037\015\040\027\041" +
    "\025\042\023\043\035\046\032\047\022\050\044\051\036" +
    "\001\002\000\052\003\ufff7\021\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\001\002\000\004\020\u0135\001\002" +
    "\000\004\002\000\001\002\000\042\012\077\026\041\027" +
    "\034\032\026\033\017\034\031\035\011\036\014\037\015" +
    "\040\027\041\025\042\023\062\100\063\075\064\102\065" +
    "\103\001\002\000\004\015\u0138\001\002\000\042\012\077" +
    "\026\041\027\034\032\026\033\017\034\031\035\011\036" +
    "\014\037\015\040\027\041\025\042\023\062\100\063\075" +
    "\064\102\065\103\001\002\000\004\014\u013a\001\002\000" +
    "\062\003\uffe0\011\uffe0\014\uffe0\015\uffe0\017\uffe0\021\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\001\002\000" +
    "\006\010\126\012\077\001\002\000\004\014\u013d\001\002" +
    "\000\062\003\uffdc\011\uffdc\014\uffdc\015\uffdc\017\uffdc\021" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\001\002" +
    "\000\006\010\126\012\077\001\002\000\004\014\u0140\001" +
    "\002\000\062\003\uffdd\011\uffdd\014\uffdd\015\uffdd\017\uffdd" +
    "\021\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\001" +
    "\002\000\006\010\126\012\077\001\002\000\004\014\u0143" +
    "\001\002\000\062\003\uffde\011\uffde\014\uffde\015\uffde\017" +
    "\uffde\021\uffde\024\uffde\025\uffde\026\uffde\027\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\004\002\005\001\001\000\030\003\017\005" +
    "\020\006\011\014\012\015\023\017\042\022\015\024\044" +
    "\025\032\026\041\027\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\046\001\001\000\016\043\051\050\056\051\050" +
    "\052\062\053\047\054\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\100\013" +
    "\103\014\073\015\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\111\001\001" +
    "\000\002\001\001\000\012\007\100\013\113\014\073\015" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\120\001\001\000" +
    "\002\001\001\000\010\007\122\010\123\021\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\100\013\126\014\073\015\075\001\001\000\004" +
    "\011\127\001\001\000\002\001\001\000\012\007\100\013" +
    "\131\014\073\015\075\001\001\000\004\011\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\140\001\001" +
    "\000\002\001\001\000\012\007\100\013\142\014\073\015" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\155\001\001\000\002\001" +
    "\001\000\010\007\122\010\123\021\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\100\013\163\014\073\015\075\001\001\000\002\001\001" +
    "\000\012\007\100\013\165\014\073\015\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\203\001\001\000\010" +
    "\045\206\055\211\056\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\214\001\001\000\002\001\001\000\010\007\122\010\123" +
    "\021\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\223\001\001" +
    "\000\002\001\001\000\012\007\100\013\225\014\073\015" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\100" +
    "\013\244\014\073\015\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\122\010\123\021\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\100\013\253\014\073\015\075\001\001\000\004" +
    "\060\254\001\001\000\004\023\255\001\001\000\002\001" +
    "\001\000\012\007\100\013\257\014\073\015\075\001\001" +
    "\000\002\001\001\000\012\007\100\013\261\014\073\015" +
    "\075\001\001\000\002\001\001\000\012\007\100\013\263" +
    "\014\073\015\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\266\001\001\000\016\031\301\032\302" +
    "\033\270\034\267\035\276\036\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\305\001\001\000\002\001\001\000\012\007\100\013\307" +
    "\014\073\015\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\314" +
    "\001\001\000\002\001\001\000\012\007\100\013\316\014" +
    "\073\015\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\323\001" +
    "\001\000\002\001\001\000\012\007\100\013\325\014\073" +
    "\015\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\332\001\001" +
    "\000\002\001\001\000\010\007\122\010\123\021\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\341\001\001\000\002\001" +
    "\001\000\010\007\122\010\123\021\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\100\013" +
    "\355\014\073\015\075\001\001\000\002\001\001\000\012" +
    "\007\100\013\357\014\073\015\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\362\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\100\013\370\014\073" +
    "\015\075\001\001\000\004\057\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\376" +
    "\010\375\016\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\100" +
    "\013\u0102\014\073\015\075\001\001\000\002\001\001\000" +
    "\012\007\100\013\u0104\014\073\015\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\376\010\375\016" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\376\010\375\016\u010a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u010d\001\001\000\012\040\u0111" +
    "\041\u010e\046\u0115\047\u0113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0118\001\001\000\002" +
    "\001\001\000\012\007\100\013\u011a\014\073\015\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u011f\001\001\000\002\001" +
    "\001\000\010\007\122\010\123\021\u0121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0126\001\001\000\002\001\001\000\010" +
    "\007\122\010\123\021\u0128\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\u0132\005\020\006\011" +
    "\014\012\015\023\017\042\022\015\024\044\025\032\026" +
    "\041\027\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\100\013\u0136\014\073\015" +
    "\075\001\001\000\002\001\001\000\012\007\100\013\u0138" +
    "\014\073\015\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\376\010\375\016\u013b\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\376\010\375\016" +
    "\u013e\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\376\010\375\016\u0141\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    StringBuilder printString = new StringBuilder();
    HashMap<Object,Object> data = new HashMap<>(); 

    Graficador graficaM = new Graficador();

    graphParameters parametro = new graphParameters();
    pieParameters parametroPie = new pieParameters();
    GraphLineParameters parametroLine = new GraphLineParameters();
    HistogramParameters parametroHistogram = new HistogramParameters();
    TablaFrecuencias tablaFrecuencias = new TablaFrecuencias();
    int contadorErrores=1;
    ArrayList<TabErrores> ErroresList = new ArrayList<>();

    int contadorTokens = 1;
    ArrayList<TablaSimbolos> Simbolos = new ArrayList<>();
    

    public void syntax_error(Symbol s){
        String errorS = " No se esperaba "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right) ;
        System.out.println(errorS);
        ErroresList.add(new TabErrores(contadorErrores, "Sintactico",errorS ,s.left, s.right));
        contadorErrores++;
        System.out.println("Error Sintactico: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico irrecuperable: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
        String errorS = " No se esperaba "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right) ;
        System.out.println(errorS);
        ErroresList.add(new TabErrores(contadorErrores, "Sintactico Irrecuperable F",errorS ,s.left, s.right));
        contadorErrores++;
    }
    public void addPrintExpression(String expr) {
        printString.append(expr);
    }
     public String getImpresiones() {
        return printString.toString();
    }

    





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String codigoUsr="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TK_PROGRAM CODIGO OTROCODIGO TK_END TK_PROGRAM 
            {
              Object RESULT =null;
		
    // recorrer arreglo de simbolos y mostrar en consola
    for (TablaSimbolos simbolo : Simbolos) {
        System.out.println(simbolo.toString());
    }

    String ContenidoHtml = TablaSimbolos.reporteHTML(Simbolos);
    TablaSimbolos.crearHTML(ContenidoHtml);

    ArrayList<TabErrores> ErroresListC = Scanner.ReporteErrores;
    //añadir este arraylista a la lista de errores
    ErroresList.addAll(ErroresListC);
    //limpiar la lista de errores ErroredListC
    Scanner.ReporteErrores.clear();
    String ContenidoErrores = TabErrores.reporteHTMLE(ErroresList);
    TabErrores.crearHTMLE(ContenidoErrores);

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;
		
    for (TablaSimbolos simbolo : Simbolos) {
        System.out.println(simbolo.toString());
    }

    String ContenidoHtml = TablaSimbolos.reporteHTML(Simbolos);
    TablaSimbolos.crearHTML(ContenidoHtml);

    ArrayList<TabErrores> ErroresListC = Scanner.ReporteErrores;
    //añadir este arraylista a la lista de errores
    ErroresList.addAll(ErroresListC);
    //limpiar la lista de errores ErroredListC
    Scanner.ReporteErrores.clear();
    String ContenidoErrores = TabErrores.reporteHTMLE(ErroresList);
    TabErrores.crearHTMLE(ContenidoErrores);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= ARREGLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= ESTADISTICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODIGO ::= GRAFICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CODIGO ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OTROCODIGO ::= OTROCODIGO CODIGO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTROCODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OTROCODIGO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTROCODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
		int varTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int varTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object varT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLE ::= TK_VAR DOSP TIPO DOSP DOSP NOMBRES MENORQ MENOS EXPRESION NT$0 TK_END PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object varT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		


    data.put(n.toString(), e);
    for (Object clave : data.keySet()) {
        System.out.println("Clave: " + clave.toString() + " |    Valor: " + data.get(clave).toString());
    }

    TablaSimbolos simbolo = new TablaSimbolos(contadorTokens, n.toString(), t.toString() , e , eleft, eright);
    Simbolos.add(simbolo);
    contadorTokens++;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARREGLO ::= TK_ARR DOSP TIPO DOSP DOSP IDARREGLO MENORQ MENOS LISTA_VALORES TK_END PYCOMA 
            {
              Object RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object tt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int Atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int Atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object At = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int Aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Airight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object Ai = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    data.put(Ai, Av);
    ArrayList<Object> miLista = (ArrayList<Object>) data.get(Ai);
    for(Object valor: miLista){
        System.out.println("Valores para: "+Ai+" son:"+valor);
    }
    TablaSimbolos simbolo = new TablaSimbolos(contadorTokens, Ai.toString(), At.toString() , miLista , Aileft, Airight);
    Simbolos.add(simbolo);
    contadorTokens++;
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= TK_CHAR 
            {
              Object RESULT =null;
		 RESULT = "char[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= TK_CADENA 
            {
              Object RESULT =null;
		 RESULT = "Double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= TK_DOUBLEERR 
            {
              Object RESULT =null;
		 RESULT = "Double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= TK_CHARERR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IDARREGLO ::= ARRB NOMBRES 
            {
              Object RESULT =null;
		int nombreAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombreA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = nombreA;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDARREGLO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_VALORES ::= CORA EXPRESION OTRA_EXPRESION CORC 
            {
              Object RESULT =null;
		int Leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Loeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Loeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object Loe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Object> lista = new ArrayList<>();
    lista.add(Le);//este añade el primer valor que se obtiene
    lista.addAll((Collection<? extends Object>) Loe); //esto indica que Loe puede ser cualquier cosa que sea de tipo Object
    
    RESULT = lista;
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OTRA_EXPRESION ::= COMA EXPRESION OTRA_EXPRESION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otraexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otraexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object otraexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Object> lista;
    if (otraexp == null) {
        lista = new ArrayList<>();
    } else {
        lista = (ArrayList<Object>) otraexp;
    }
    lista.add(0,exp);
    RESULT = lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_EXPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OTRA_EXPRESION ::= 
            {
              Object RESULT =null;
		
    RESULT = new ArrayList<>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_EXPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= ENTEROS 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= DECIMAL 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= STRINGT 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= NOMBRES 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            RESULT=data.get(E); 
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= OPERACION 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= IDARREGLO 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //Para cuando sean arreglos guarlos y retornar el arreglo
                           ArrayList<Object> datos = (ArrayList<Object>) data.get(E);
                            RESULT = datos; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= ESTADISTICA 
            {
              Object RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION ::= TK_SUM PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int ns1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ns1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ns1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ns2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ns2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ns2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    double n1 = Double.parseDouble(ns1.toString());
                    double n2 = Double.parseDouble(ns2.toString());
                    RESULT = n1 + n2;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= TK_RES PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nr1.toString());
                        double n2 = Double.parseDouble(nr2.toString());
                        RESULT = n1 - n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= TK_MUL PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nm1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nm2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nm1.toString());
                        double n2 = Double.parseDouble(nm2.toString());
                        RESULT = n1 * n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= TK_DIV PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nd1.toString());
                        double n2 = Double.parseDouble(nd2.toString());
                        RESULT = n1 / n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= TK_MOD PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int mn1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mn1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mn1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mn2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mn2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mn2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(mn1.toString());
                        double n2 = Double.parseDouble(mn2.toString());
                        RESULT = n1 % n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTADISTICA ::= TK_MEDIA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    double sum = 0;
                    int count = 0;
                    for (Object valor : datosC) {
                            sum += Double.parseDouble(valor.toString());
                            count++;
                        
                    }
                    double media = sum / count ;
                    RESULT = media;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESTADISTICA ::= TK_MEDIANA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    double mediana = 0;
                    int size = datosC.size();
                    if (size % 2 == 0) {
                        mediana = (Double.parseDouble(datosC.get(size / 2 - 1).toString()) + Double.parseDouble(datosC.get(size / 2).toString())) / 2;
                    } else {
                        mediana = Double.parseDouble(datosC.get(size / 2).toString());
                    }
                    RESULT = mediana;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ESTADISTICA ::= TK_MODA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    int maximoVeces = 0;
                    double moda = 0;
                    for (int i = 0; i < datosC.size(); i++) {
                        int veces = 0;
                        for (int j = 0; j < datosC.size(); j++) {
                            if (datosC.get(i).equals(datosC.get(j))) {
                                veces++;
                            }
                        }
                        if (veces > maximoVeces) {
                            moda = Double.parseDouble(datosC.get(i).toString());
                            maximoVeces = veces;
                        }
                    }
                    RESULT = moda;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESTADISTICA ::= TK_VARIANZA PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    //para la varianza se necesita calcular la media aritmetica
                    double sum = 0;
                    for (Object valor : datosC) {
                            sum += Double.parseDouble(valor.toString());                      
                    }
                    double media = sum / datosC.size() ;
                    // por cada dato RESTAR este valor y elevar al cuadrado
                    double SUMparentesisCuadrados = 0;
                    for(Object valor: datosC){
                        double par = Double.parseDouble(valor.toString()) - media;
                        SUMparentesisCuadrados += par * par;
                    }
                    double varianza = SUMparentesisCuadrados /datosC.size();
                    RESULT = varianza;
                    

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESTADISTICA ::= TK_MAX PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    Double maxV = Double.parseDouble(datosC.get(0).toString());
                    for(Object obj:datosC){
                    double num = Double.parseDouble(obj.toString());
                    if(num > maxV){
                        maxV = num;
                    }
                    }
                    RESULT = maxV;
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ESTADISTICA ::= TK_MIN PARA DATOS PARC 
            {
              Object RESULT =null;
		int arrVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    ArrayList<Object> datosC = (ArrayList<Object>) arrV;
                    Double minV =  Double.parseDouble(datosC.get(0).toString());
                    for(Object obj:datosC){
                    double num = Double.parseDouble(obj.toString());
                    if(num < minV){
                        minV = num;
                    }
                    }
                    RESULT = minV;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DATOS ::= IDARREGLO 
            {
              Object RESULT =null;
		int arrIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Object> datos = (ArrayList<Object>) data.get(arrID);
        RESULT = datos;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DATOS ::= LISTA_VALORES 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IMPRESION ::= TK_CONSOLE DOSP DOSP TIPOIMPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		 addPrintExpression("\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 addPrintExpression(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOIMPRESION ::= TK_PRINT IGUAL EXPRESION NT$1 OTRAEXPRESIONIMP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIMPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOIMPRESION ::= TK_COLUMN IGUAL EXPRESION MENOS MAYORQ ARREGLOIMP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ArrayList<Object> datosImp = (ArrayList<Object>) arreglo;
                    //Aca quiero meter los datos del arreglo donde el titulo sera el e.toString()
                    //y los datos del arreglo agregar cada uno al addPrintExpression con salto de linea al final de cada uno
                    addPrintExpression("---------------------\n");
                    addPrintExpression(e.toString());
                    addPrintExpression("\n");
                    addPrintExpression("---------------------\n");
                    for(Object dato: datosImp){
                        addPrintExpression(dato.toString());
                        addPrintExpression("\n");
                    }
                    addPrintExpression("---------------------\n");

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIMPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARREGLOIMP ::= IDARREGLO 
            {
              Object RESULT =null;
		int arrIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Object> datos = (ArrayList<Object>) data.get(arrID);
        RESULT = datos;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOIMP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARREGLOIMP ::= LISTA_VALORES 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOIMP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OTRAEXPRESIONIMP ::= OTRAEXPRESIONIMP COMA EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addPrintExpression(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAEXPRESIONIMP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OTRAEXPRESIONIMP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAEXPRESIONIMP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // GRAFICA ::= GRAPHBAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // GRAFICA ::= GRAPHPIE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // GRAFICA ::= GRAPHLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GRAFICA ::= HISTOGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // GRAPHBAR ::= TK_GRAPHBAR PARA INSTRUCCIONESGB TK_EXEC TK_GRAPHBAR TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;
		
                ArrayList<String> ejeX = parametro.getEjeX();
                ArrayList<Double> ejeY = parametro.getEjeY();
                String titulo = parametro.getTitulo();
                String tituloX = parametro.getTituloX();
                String tituloY = parametro.getTituloY();
                graficaM.crearGraphBarra(ejeY,titulo,ejeX,tituloX,tituloY);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPHBAR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCCIONESGB ::= INSTRUCCIONESGB INSTRUCCIONB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGB",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCIONESGB ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGB",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCIONB ::= TITULOGRAFICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCIONB ::= EJEX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCCIONB ::= EJEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTRUCCIONB ::= TITULOX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTRUCCIONB ::= TITULOY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TITULOGRAFICA ::= TK_TITULO DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    parametro.setTitulo(e.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOGRAFICA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EJEX ::= TK_EJEX DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Object> arrobj = (ArrayList<Object>) arr;
            ArrayList<String> datos = new ArrayList<>();
            for(Object dato: arrobj){
                datos.add(dato.toString());
            }
            parametro.setEjeX(datos);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJEX",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EJEY ::= TK_EJEY DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Object> arrobj = (ArrayList<Object>) arr;
            ArrayList<Double> datos = new ArrayList<>();
            for(Object dato: arrobj){
                datos.add(Double.parseDouble(dato.toString()));
            }
            parametro.setEjeY(datos);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJEY",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TITULOX ::= TK_TITULOX DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            parametro.setTituloX(e.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOX",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TITULOY ::= TK_TITULOY DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            parametro.setTituloY(e.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOY",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // GRAPHPIE ::= TK_GRAPHPIE PARA INSTRUCCIONESGP TK_EXEC TK_GRAPHPIE TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;
		
                ArrayList<String> labels = parametroPie.getLabels();
                ArrayList<Double> values = parametroPie.getValues();
                String titulo = parametroPie.getTitulo();
                graficaM.crearGraphPie(values,titulo,labels);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPHPIE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTRUCCIONESGP ::= INSTRUCCIONESGP INSTRUCCIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUCCIONESGP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUCCIONP ::= TITULOGRAFICAPIE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCCIONP ::= VALUESGRAPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTRUCCIONP ::= LABELGRAPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TITULOGRAFICAPIE ::= TK_TITULO DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    parametroPie.setTitulo(e.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOGRAFICAPIE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALUESGRAPH ::= TK_VALUES DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    ArrayList<Object> datos = (ArrayList<Object>) arr;
                    ArrayList<Double> datosD = new ArrayList<>();
                    for(Object dato: datos){
                        datosD.add(Double.parseDouble(dato.toString()));
                    }
                    parametroPie.setValues(datosD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUESGRAPH",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LABELGRAPH ::= TK_LABEL DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    ArrayList<Object> datos = (ArrayList<Object>) arr;
                    ArrayList<String> datosS = new ArrayList<>();
                    for(Object dato: datos){
                        datosS.add(dato.toString());
                    }
                    parametroPie.setLabels(datosS);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LABELGRAPH",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // GRAPHLINE ::= TK_GRAPHLINE PARA INSTRUCCIONESGL TK_EXEC TK_GRAPHLINE TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;
		
                ArrayList<String> ejeX = parametroLine.getEjeX();
                ArrayList<Double> ejeY = parametroLine.getEjeY();
                String titulo = parametroLine.getTitulo();
                String tituloX = parametroLine.getTituloX();
                String tituloY = parametroLine.getTituloY();
                graficaM.crearGraphLinea(ejeY,titulo,tituloX,tituloY,ejeX);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPHLINE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCCIONESGL ::= INSTRUCCIONESGL INSTRUCCIONL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTRUCCIONESGL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESGL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCCIONL ::= TITULOGRAFICALINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTRUCCIONL ::= EJEXLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCCIONL ::= EJEYLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCCIONL ::= TITULOXLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCCIONL ::= TITULOYLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TITULOGRAFICALINEA ::= TK_TITULO DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    parametroLine.setTitulo(e.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOGRAFICALINEA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EJEXLINEA ::= TK_EJEX DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Object> arrobj = (ArrayList<Object>) arr;
            ArrayList<String> datos = new ArrayList<>();
            for(Object dato: arrobj){
                datos.add(dato.toString());
            }
            parametroLine.setEjeX(datos);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJEXLINEA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EJEYLINEA ::= TK_EJEY DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Object> arrobj = (ArrayList<Object>) arr;
            ArrayList<Double> datos = new ArrayList<>();
            for(Object dato: arrobj){
                datos.add(Double.parseDouble(dato.toString()));
            }
            parametroLine.setEjeY(datos);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJEYLINEA",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TITULOXLINEA ::= TK_TITULOX DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            parametroLine.setTituloX(e.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOXLINEA",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TITULOYLINEA ::= TK_TITULOY DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            parametroLine.setTituloY(e.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOYLINEA",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // HISTOGRAM ::= TK_HISTOGRAM PARA INSTRUCCIONESH TK_EXEC TK_HISTOGRAM TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;
		
                ArrayList<Double> datos = parametroHistogram.getValores();
                String titulo = parametroHistogram.getTitulo();
                graficaM.crearHistogram(titulo,datos);
                tablaFrecuencias.setTitulo(titulo);
                tablaFrecuencias.setValores(datos);
                tablaFrecuencias.calcularFrecuencias();
                String TablaF = tablaFrecuencias.toString();
                addPrintExpression(TablaF);
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HISTOGRAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCCIONESH ::= INSTRUCCIONESH INSTRUCCIONH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESH",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCCIONESH ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESH",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCCIONH ::= TITULOGRAFICAHI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONH",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCCIONH ::= VALUESGRAPHHI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONH",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TITULOGRAFICAHI ::= TK_TITULO DOSP DOSP TIPO IGUAL EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    parametroHistogram.setTitulo(e.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOGRAFICAHI",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALUESGRAPHHI ::= TK_VALUES DOSP DOSP TIPO IGUAL ARREGLOIMP TK_END PYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    ArrayList<Object> datos = (ArrayList<Object>) arr;
                    ArrayList<Double> datosD = new ArrayList<>();
                    for(Object dato: datos){
                        datosD.add(Double.parseDouble(dato.toString()));
                    }
                    parametroHistogram.setValores(datosD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUESGRAPHHI",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
