
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\004\000" +
    "\002\004\002\000\002\005\015\000\002\006\015\000\002" +
    "\012\003\000\002\012\003\000\002\007\004\000\002\010" +
    "\006\000\002\011\005\000\002\011\002\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\010\000\002\014\010\000\002\014\010\000\002\014" +
    "\010\000\002\014\010\000\002\015\006\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\016\003\000\002" +
    "\016\003\000\002\020\010\000\002\021\006\000\002\021" +
    "\010\000\002\022\003\000\002\022\003\000\002\023\015" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\012\000\002\030\003\000\002" +
    "\030\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\004\000\002\027\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\020\004\001\002\000\046\021\027\025" +
    "\035\026\036\027\033\030\025\031\015\032\030\033\007" +
    "\034\012\035\014\036\026\037\024\040\023\041\032\044" +
    "\031\045\021\046\040\047\034\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\013\uffe2\001" +
    "\002\000\050\021\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\001\002\000\050\021\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\044\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\001\002\000\004\013\uffe1\001\002" +
    "\000\050\021\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\001\002\000\004\013\uffe0\001\002\000\004\013\224" +
    "\001\002\000\004\013\217\001\002\000\050\021\027\024" +
    "\ufff8\025\035\026\036\027\033\030\025\031\015\032\030" +
    "\033\007\034\012\035\014\036\026\037\024\040\023\041" +
    "\032\044\031\045\021\046\040\047\034\001\002\000\050" +
    "\021\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\044\uffff\045\uffff\046\uffff\047\uffff\001" +
    "\002\000\006\013\uffd3\024\uffd3\001\002\000\050\021\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\001\002\000" +
    "\004\013\uffdd\001\002\000\004\013\uffde\001\002\000\004" +
    "\013\205\001\002\000\004\013\uffdf\001\002\000\004\004" +
    "\173\001\002\000\004\013\166\001\002\000\006\013\uffd4" +
    "\024\uffd4\001\002\000\004\004\145\001\002\000\004\013" +
    "\140\001\002\000\006\013\uffd1\024\uffd1\001\002\000\004" +
    "\004\126\001\002\000\004\013\121\001\002\000\050\021" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\001\002" +
    "\000\006\013\uffd2\024\uffd2\001\002\000\004\013\042\001" +
    "\002\000\020\050\047\051\050\052\046\053\052\054\051" +
    "\056\044\057\045\001\002\000\022\050\047\051\050\052" +
    "\046\053\052\054\051\055\uffc5\056\044\057\045\001\002" +
    "\000\004\004\uffcd\001\002\000\004\004\uffcb\001\002\000" +
    "\004\004\uffc9\001\002\000\004\004\uffcc\001\002\000\004" +
    "\004\uffca\001\002\000\004\004\uffc7\001\002\000\004\004" +
    "\uffc8\001\002\000\004\004\054\001\002\000\004\004\055" +
    "\001\002\000\006\022\057\023\056\001\002\000\006\004" +
    "\ufff5\016\ufff5\001\002\000\006\004\ufff4\016\ufff4\001\002" +
    "\000\004\016\061\001\002\000\044\010\064\012\067\026" +
    "\036\027\033\030\025\031\015\032\030\033\007\034\012" +
    "\035\014\036\026\037\024\040\023\060\070\061\063\062" +
    "\073\063\074\001\002\000\014\011\uffeb\014\uffeb\015\uffeb" +
    "\017\uffeb\024\uffeb\001\002\000\014\011\uffee\014\uffee\015" +
    "\uffee\017\uffee\024\uffee\001\002\000\042\012\067\026\036" +
    "\027\033\030\025\031\015\032\030\033\007\034\012\035" +
    "\014\036\026\037\024\040\023\060\070\061\063\062\073" +
    "\063\074\001\002\000\014\011\uffe9\014\uffe9\015\uffe9\017" +
    "\uffe9\024\uffe9\001\002\000\004\024\uffce\001\002\000\004" +
    "\063\100\001\002\000\014\011\uffef\014\uffef\015\uffef\017" +
    "\uffef\024\uffef\001\002\000\014\011\uffea\014\uffea\015\uffea" +
    "\017\uffea\024\uffea\001\002\000\004\024\076\001\002\000" +
    "\014\011\uffed\014\uffed\015\uffed\017\uffed\024\uffed\001\002" +
    "\000\014\011\uffec\014\uffec\015\uffec\017\uffec\024\uffec\001" +
    "\002\000\004\024\uffcf\001\002\000\004\007\077\001\002" +
    "\000\022\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\001\002\000\016\005\ufff3\011\ufff3" +
    "\014\ufff3\015\ufff3\017\ufff3\024\ufff3\001\002\000\006\011" +
    "\ufff0\015\103\001\002\000\004\011\106\001\002\000\042" +
    "\012\067\026\036\027\033\030\025\031\015\032\030\033" +
    "\007\034\012\035\014\036\026\037\024\040\023\060\070" +
    "\061\063\062\073\063\074\001\002\000\010\011\ufff0\015" +
    "\103\024\ufff0\001\002\000\006\011\ufff1\024\ufff1\001\002" +
    "\000\006\014\ufff2\024\ufff2\001\002\000\022\050\047\051" +
    "\050\052\046\053\052\054\051\055\uffc5\056\044\057\045" +
    "\001\002\000\004\055\111\001\002\000\012\044\031\045" +
    "\021\046\040\047\034\001\002\000\004\024\113\001\002" +
    "\000\004\007\114\001\002\000\004\014\115\001\002\000" +
    "\004\024\116\001\002\000\004\007\117\001\002\000\050" +
    "\021\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\001" +
    "\002\000\004\055\uffc6\001\002\000\042\012\067\026\036" +
    "\027\033\030\025\031\015\032\030\033\007\034\012\035" +
    "\014\036\026\037\024\040\023\060\070\061\063\062\073" +
    "\063\074\001\002\000\004\015\123\001\002\000\042\012" +
    "\067\026\036\027\033\030\025\031\015\032\030\033\007" +
    "\034\012\035\014\036\026\037\024\040\023\060\070\061" +
    "\063\062\073\063\074\001\002\000\004\014\125\001\002" +
    "\000\060\011\uffe8\014\uffe8\015\uffe8\017\uffe8\021\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\001\002\000\006" +
    "\022\057\023\056\001\002\000\004\004\130\001\002\000" +
    "\004\004\131\001\002\000\004\012\067\001\002\000\004" +
    "\005\133\001\002\000\004\017\134\001\002\000\004\010" +
    "\064\001\002\000\004\024\136\001\002\000\004\007\137" +
    "\001\002\000\050\021\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\001\002\000\042\012\067\026\036\027\033" +
    "\030\025\031\015\032\030\033\007\034\012\035\014\036" +
    "\026\037\024\040\023\060\070\061\063\062\073\063\074" +
    "\001\002\000\004\015\142\001\002\000\042\012\067\026" +
    "\036\027\033\030\025\031\015\032\030\033\007\034\012" +
    "\035\014\036\026\037\024\040\023\060\070\061\063\062" +
    "\073\063\074\001\002\000\004\014\144\001\002\000\060" +
    "\011\uffe7\014\uffe7\015\uffe7\017\uffe7\021\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\047\uffe7\001\002\000\004\004\146" +
    "\001\002\000\006\042\147\043\151\001\002\000\004\016" +
    "\163\001\002\000\004\024\161\001\002\000\004\016\152" +
    "\001\002\000\042\012\067\026\036\027\033\030\025\031" +
    "\015\032\030\033\007\034\012\035\014\036\026\037\024" +
    "\040\023\060\070\061\063\062\073\063\074\001\002\000" +
    "\004\017\154\001\002\000\004\006\155\001\002\000\006" +
    "\010\064\012\067\001\002\000\004\024\uffd7\001\002\000" +
    "\004\024\uffd6\001\002\000\004\024\uffd8\001\002\000\004" +
    "\007\162\001\002\000\050\021\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\001\002\000\042\012\067\026\036" +
    "\027\033\030\025\031\015\032\030\033\007\034\012\035" +
    "\014\036\026\037\024\040\023\060\070\061\063\062\073" +
    "\063\074\001\002\000\006\015\103\024\ufff0\001\002\000" +
    "\004\024\uffd9\001\002\000\042\012\067\026\036\027\033" +
    "\030\025\031\015\032\030\033\007\034\012\035\014\036" +
    "\026\037\024\040\023\060\070\061\063\062\073\063\074" +
    "\001\002\000\004\015\170\001\002\000\042\012\067\026" +
    "\036\027\033\030\025\031\015\032\030\033\007\034\012" +
    "\035\014\036\026\037\024\040\023\060\070\061\063\062" +
    "\073\063\074\001\002\000\004\014\172\001\002\000\060" +
    "\011\uffe4\014\uffe4\015\uffe4\017\uffe4\021\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\001\002\000\006\022\057" +
    "\023\056\001\002\000\004\004\175\001\002\000\004\004" +
    "\176\001\002\000\004\063\177\001\002\000\004\005\200" +
    "\001\002\000\004\017\201\001\002\000\042\012\067\026" +
    "\036\027\033\030\025\031\015\032\030\033\007\034\012" +
    "\035\014\036\026\037\024\040\023\060\070\061\063\062" +
    "\073\063\074\001\002\000\004\024\203\001\002\000\004" +
    "\007\204\001\002\000\050\021\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\001\002\000\042\012\067\026\036" +
    "\027\033\030\025\031\015\032\030\033\007\034\012\035" +
    "\014\036\026\037\024\040\023\060\070\061\063\062\073" +
    "\063\074\001\002\000\004\015\207\001\002\000\042\012" +
    "\067\026\036\027\033\030\025\031\015\032\030\033\007" +
    "\034\012\035\014\036\026\037\024\040\023\060\070\061" +
    "\063\062\073\063\074\001\002\000\004\014\211\001\002" +
    "\000\060\011\uffe6\014\uffe6\015\uffe6\017\uffe6\021\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\001\002\000\050" +
    "\021\027\024\ufff8\025\035\026\036\027\033\030\025\031" +
    "\015\032\030\033\007\034\012\035\014\036\026\037\024" +
    "\040\023\041\032\044\031\045\021\046\040\047\034\001" +
    "\002\000\004\024\214\001\002\000\004\020\215\001\002" +
    "\000\004\002\000\001\002\000\004\024\ufff9\001\002\000" +
    "\006\010\064\012\067\001\002\000\004\014\uffdc\001\002" +
    "\000\004\014\uffdb\001\002\000\004\014\223\001\002\000" +
    "\060\011\uffe3\014\uffe3\015\uffe3\017\uffe3\021\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\001\002\000\042\012" +
    "\067\026\036\027\033\030\025\031\015\032\030\033\007" +
    "\034\012\035\014\036\026\037\024\040\023\060\070\061" +
    "\063\062\073\063\074\001\002\000\004\015\226\001\002" +
    "\000\042\012\067\026\036\027\033\030\025\031\015\032" +
    "\030\033\007\034\012\035\014\036\026\037\024\040\023" +
    "\060\070\061\063\062\073\063\074\001\002\000\004\014" +
    "\230\001\002\000\060\011\uffe5\014\uffe5\015\uffe5\017\uffe5" +
    "\021\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\002\004\001\001\000\024\003\016\005" +
    "\017\006\010\014\007\015\021\017\015\020\036\023\012" +
    "\024\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\211\004\212\005\017" +
    "\006\010\014\007\015\021\017\015\020\036\023\012\024" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\042\026\052\001\001\000\010\025\106\026\052\027\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\070\010\065\013\074\014" +
    "\061\015\064\017\015\030\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\070\013\100\014\061\015" +
    "\064\017\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\101\001\001\000\002\001\001\000\014" +
    "\007\070\013\103\014\061\015\064\017\015\001\001\000" +
    "\004\011\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\106\026\052\027\117\001\001\000\002\001" +
    "\001\000\004\024\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\070" +
    "\013\121\014\061\015\064\017\015\001\001\000\002\001" +
    "\001\000\014\007\070\013\123\014\061\015\064\017\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\070\013\140\014\061\015" +
    "\064\017\015\001\001\000\002\001\001\000\014\007\070" +
    "\013\142\014\061\015\064\017\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\070\013\152\014\061\015\064\017\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\155\010\156\022\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\070\013\163\014\061\015\064\017\015" +
    "\001\001\000\004\011\164\001\001\000\002\001\001\000" +
    "\014\007\070\013\166\014\061\015\064\017\015\001\001" +
    "\000\002\001\001\000\014\007\070\013\170\014\061\015" +
    "\064\017\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\070\013\201\014\061\015\064\017\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\070\013\205\014\061\015\064\017\015\001" +
    "\001\000\002\001\001\000\014\007\070\013\207\014\061" +
    "\015\064\017\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\211\004\215\005\017\006\010\014\007" +
    "\015\021\017\015\020\036\023\012\024\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\217\010\220\016\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\070\013\224\014\061\015\064\017" +
    "\015\001\001\000\002\001\001\000\014\007\070\013\226" +
    "\014\061\015\064\017\015\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico irrecuperable: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    
    String codigoUsr="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TK_PROGRAM CODIGO OTROCODIGO TK_END TK_PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= ARREGLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= ESTADISTICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= GRAFICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OTROCODIGO ::= CODIGO OTROCODIGO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTROCODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OTROCODIGO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTROCODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLE ::= TK_VAR DOSP TIPO DOSP DOSP NOMBRES MENORQ MENOS EXPRESION TK_END PYCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    codigoUsr+="\n"+"Variable: Tipo: "+t+"    Nombre:  "+n+" = "+e+";";
    System.out.println(codigoUsr);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ARREGLO ::= TK_ARR DOSP TIPO DOSP DOSP IDARREGLO MENORQ MENOS LISTA_VALORES TK_END PYCOMA 
            {
              Object RESULT =null;
		int Atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int Atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object At = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int Aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Airight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object Ai = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    codigoUsr+="\n"+"Arreglo:  Tipo: "+At+"    Nombre: "+Ai+" = "+Av+";";
    System.out.println(codigoUsr);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= TK_CHAR 
            {
              Object RESULT =null;
		 RESULT = "char[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= TK_CADENA 
            {
              Object RESULT =null;
		 RESULT = "String"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDARREGLO ::= ARRB NOMBRES 
            {
              Object RESULT =null;
		int nombreAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombreA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = nombreA;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDARREGLO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_VALORES ::= CORA EXPRESION OTRA_EXPRESION CORC 
            {
              Object RESULT =null;
		int Leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Loeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Loeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object Loe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OTRA_EXPRESION ::= COMA EXPRESION OTRA_EXPRESION 
            {
              Object RESULT =null;
		int Oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object Oe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_EXPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OTRA_EXPRESION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_EXPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= ENTEROS 
            {
              Object RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eE = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=eE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= DECIMAL 
            {
              Object RESULT =null;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=eD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= STRINGT 
            {
              Object RESULT =null;
		int Esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String Es = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=Es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= NOMBRES 
            {
              Object RESULT =null;
		int Enleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Enright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String En = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=En; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= OPERACION 
            {
              Object RESULT =null;
		int Eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object Eo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=Eo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= IDARREGLO 
            {
              Object RESULT =null;
		int Eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object Ei = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=Ei; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= ESTADISTICA 
            {
              Object RESULT =null;
		int Eesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Eesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object Ees = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=Ees; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACION ::= TK_SUM PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int ns1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ns1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ns1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ns2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ns2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ns2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    double n1 = Double.parseDouble(ns1.toString());
                    double n2 = Double.parseDouble(ns2.toString());
                    RESULT = n1 + n2;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION ::= TK_RES PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nr1.toString());
                        double n2 = Double.parseDouble(nr2.toString());
                        RESULT = n1 - n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION ::= TK_MUL PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nm1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nm2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nm1.toString());
                        double n2 = Double.parseDouble(nm2.toString());
                        RESULT = n1 * n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= TK_DIV PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(nd1.toString());
                        double n2 = Double.parseDouble(nd2.toString());
                        RESULT = n1 / n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION ::= TK_MOD PARA EXPRESION COMA EXPRESION PARC 
            {
              Object RESULT =null;
		int mn1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mn1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mn1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mn2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mn2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mn2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        double n1 = Double.parseDouble(mn1.toString());
                        double n2 = Double.parseDouble(mn2.toString());
                        RESULT = n1 % n2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ESTADISTICA ::= TIPOESTADISTICA PARA DATOS PARC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADISTICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPOESTADISTICA ::= TK_MEDIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOESTADISTICA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPOESTADISTICA ::= TK_MEDIANA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOESTADISTICA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOESTADISTICA ::= TK_MODA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOESTADISTICA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOESTADISTICA ::= TK_VARIANZA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOESTADISTICA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOESTADISTICA ::= TK_MAX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOESTADISTICA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOESTADISTICA ::= TK_MIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOESTADISTICA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DATOS ::= IDARREGLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DATOS ::= LISTA_VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IMPRESION ::= TK_CONSOLE DOSP DOSP TIPOIMPRESION TK_END PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOIMPRESION ::= TK_PRINT IGUAL EXPRESION OTRA_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIMPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOIMPRESION ::= TK_COLUMN IGUAL EXPRESION MENOS MAYORQ ARREGLOIMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIMPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARREGLOIMP ::= IDARREGLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOIMP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARREGLOIMP ::= LISTA_VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOIMP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // GRAFICA ::= TIPOGRAPH PARA INSTRUCCION OTRAINSTRUCCION TK_EXEC TIPOGRAPH TK_END PYCOMA PARC TK_END PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOGRAPH ::= TK_GRAPHBAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOGRAPH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOGRAPH ::= TK_GRAPHPIE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOGRAPH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOGRAPH ::= TK_GRAPHLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOGRAPH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOGRAPH ::= TK_HISTOGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOGRAPH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCCION ::= TIPOINSTRUCCION DOSP DOSP TIPO IGUAL EXPRESIONGRAPH TK_END PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESIONGRAPH ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONGRAPH",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESIONGRAPH ::= LISTA_VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONGRAPH",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOINSTRUCCION ::= TK_VALUES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOINSTRUCCION ::= TK_TITULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOINSTRUCCION ::= TK_LABEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOINSTRUCCION ::= TK_EJEX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOINSTRUCCION ::= TK_EJEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOINSTRUCCION ::= TK_TITULOX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOINSTRUCCION ::= TK_TITULOY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOINSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OTRAINSTRUCCION ::= INSTRUCCION OTRAINSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAINSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OTRAINSTRUCCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRAINSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
