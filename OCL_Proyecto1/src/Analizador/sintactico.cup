package Analizador;
//importaciones si fuese necesario
import java_cup.runtime.Symbol;
import java.util.LinkedList;

//codigo de la clase parser
parser code 
{:
    
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico irrecuperable: "+s.value+" en la linea: "+(s.left)+" en la columna: "+(s.right));
    }
:}

action code
{:
    
    String codigoUsr="";
:}

terminal DOSP, MENORQ, MAYORQ, PYCOMA, CORA, CORC, ARRB, PARA, PARC, COMA, IGUAL, MENOS;
terminal TK_PROGRAM, TK_VAR, TK_CADENA, TK_CHAR, TK_END, TK_ARR, TK_SUM, TK_RES;
terminal TK_MUL, TK_DIV, TK_MOD, TK_MEDIA, TK_MEDIANA, TK_MODA, TK_VARIANZA, TK_MAX, TK_MIN;
terminal TK_CONSOLE, TK_PRINT, TK_COLUMN, TK_GRAPHBAR, TK_GRAPHPIE, TK_GRAPHLINE, TK_HISTOGRAM;
terminal TK_TITULO, TK_EJEX, TK_EJEY, TK_TITULOX, TK_TITULOY, TK_EXEC, TK_VALUES, TK_LABEL;
terminal String ENTEROS, DECIMAL, STRINGT, NOMBRES;


nonterminal INICIO, CODIGO, OTROCODIGO, VARIABLE, ARREGLO, IDARREGLO, LISTA_VALORES;
nonterminal OTRA_EXPRESION, TIPO, EXPRESION, OPERACION, ESTADISTICA, DATOS, TIPOESTADISTICA;
nonterminal IMPRESION, TIPOIMPRESION, ARREGLOIMP, GRAFICA, TIPOGRAPH, INSTRUCCION, TIPOINSTRUCCION, OTRAINSTRUCCION;
nonterminal EXPRESIONGRAPH;


start with INICIO;

INICIO ::= TK_PROGRAM CODIGO OTROCODIGO TK_END TK_PROGRAM;

CODIGO ::= VARIABLE 
          | ARREGLO 
          | OPERACION 
          | ESTADISTICA 
          | IMPRESION 
          | GRAFICA ;

OTROCODIGO ::= CODIGO OTROCODIGO 
            | /* vacio */; 

VARIABLE ::= TK_VAR DOSP TIPO:t DOSP DOSP NOMBRES:n MENORQ MENOS EXPRESION:e TK_END PYCOMA
{:
    codigoUsr+="\n"+"Variable: Tipo: "+t+"    Nombre:  "+n+" = "+e+";";
    System.out.println(codigoUsr);
:};

ARREGLO ::= TK_ARR DOSP TIPO:At DOSP DOSP IDARREGLO:Ai MENORQ MENOS LISTA_VALORES:Av TK_END PYCOMA
{:
    codigoUsr+="\n"+"Arreglo:  Tipo: "+At+"    Nombre: "+Ai+" = "+Av+";";
    System.out.println(codigoUsr);
:};

TIPO ::= TK_CHAR {: RESULT = "char[]"; :} 
        | TK_CADENA {: RESULT = "String"; :};

IDARREGLO ::= ARRB NOMBRES:nombreA
{:
    RESULT = nombreA;
:}
;

LISTA_VALORES ::= CORA EXPRESION:Le OTRA_EXPRESION:Loe CORC;


OTRA_EXPRESION ::= COMA EXPRESION:Oe OTRA_EXPRESION 
                | /* vacio */;

EXPRESION ::= ENTEROS:eE {: RESULT=eE; :} 
             | DECIMAL:eD {: RESULT=eD; :} 
             | STRINGT:Es {: RESULT=Es; :} 
             | NOMBRES:En {: RESULT=En; :} 
             | OPERACION:Eo {: RESULT=Eo; :} 
             | IDARREGLO:Ei {: RESULT=Ei; :} 
             | ESTADISTICA: Ees {: RESULT=Ees; :};

OPERACION ::=     TK_SUM PARA EXPRESION:ns1 COMA EXPRESION:ns2 PARC
                  {: 
                    double n1 = Double.parseDouble(ns1.toString());
                    double n2 = Double.parseDouble(ns2.toString());
                    RESULT = n1 + n2;
                  :}
                | TK_RES PARA EXPRESION:nr1 COMA EXPRESION:nr2 PARC
                    {: 
                        double n1 = Double.parseDouble(nr1.toString());
                        double n2 = Double.parseDouble(nr2.toString());
                        RESULT = n1 - n2;
                    :}
                | TK_MUL PARA EXPRESION:nm1 COMA EXPRESION:nm2 PARC
                    {: 
                        double n1 = Double.parseDouble(nm1.toString());
                        double n2 = Double.parseDouble(nm2.toString());
                        RESULT = n1 * n2;
                    :}
                | TK_DIV PARA EXPRESION:nd1 COMA EXPRESION:nd2 PARC
                    {: 
                        double n1 = Double.parseDouble(nd1.toString());
                        double n2 = Double.parseDouble(nd2.toString());
                        RESULT = n1 / n2;
                    :}
                | TK_MOD PARA EXPRESION:mn1 COMA EXPRESION:mn2 PARC
                    {: 
                        double n1 = Double.parseDouble(mn1.toString());
                        double n2 = Double.parseDouble(mn2.toString());
                        RESULT = n1 % n2;
                    :};

ESTADISTICA ::= TIPOESTADISTICA PARA DATOS PARC;

TIPOESTADISTICA ::= TK_MEDIA 
                  | TK_MEDIANA 
                  | TK_MODA 
                  | TK_VARIANZA 
                  | TK_MAX 
                  | TK_MIN;

DATOS ::= IDARREGLO
         | LISTA_VALORES;

IMPRESION ::= TK_CONSOLE DOSP DOSP TIPOIMPRESION TK_END PYCOMA;

TIPOIMPRESION ::= TK_PRINT IGUAL EXPRESION OTRA_EXPRESION 
                | TK_COLUMN IGUAL EXPRESION MENOS MAYORQ ARREGLOIMP;

ARREGLOIMP ::= IDARREGLO 
            | LISTA_VALORES;

GRAFICA ::= TIPOGRAPH PARA INSTRUCCION OTRAINSTRUCCION TK_EXEC TIPOGRAPH TK_END PYCOMA PARC TK_END PYCOMA;

TIPOGRAPH ::= TK_GRAPHBAR 
            | TK_GRAPHPIE 
            | TK_GRAPHLINE 
            | TK_HISTOGRAM;

INSTRUCCION ::= TIPOINSTRUCCION DOSP DOSP TIPO IGUAL EXPRESIONGRAPH TK_END PYCOMA;

EXPRESIONGRAPH ::= EXPRESION 
                | LISTA_VALORES;

TIPOINSTRUCCION ::= TK_VALUES 
                    | TK_TITULO
                    | TK_LABEL 
                    | TK_EJEX 
                    | TK_EJEY 
                    | TK_TITULOX 
                    | TK_TITULOY;

OTRAINSTRUCCION ::= INSTRUCCION OTRAINSTRUCCION 
                    | /* vacio */;


